import type { Context, SQSBatchItemFailure } from 'aws-lambda';
import { AdapterContract, AdapterRequest, GetResponseAdapterProps, OnErrorProps } from '../../../contracts/index';
import { IEmptyResponse } from '../../../core/index';
/**
 * The options to customize the {@link AwsSimpleAdapter}
 *
 * @breadcrumb Adapters / AWS / AWS Simple Adapter
 * @public
 */
export interface AWSSimpleAdapterOptions {
    /**
     * The path that will be used to create a request to be forwarded to the framework.
     */
    forwardPath: string;
    /**
     * The http method that will be used to create a request to be forwarded to the framework.
     */
    forwardMethod: string;
    /**
     * The AWS Service host that will be injected inside headers to developer being able to validate if request originate from the library.
     */
    host: string;
    /**
     * Tells if this adapter should support batch item failures.
     */
    batch?: true | false;
}
/**
 * The batch item failure response expected from the API server
 *
 * @breadcrumb Adapters / AWS / AWS Simple Adapter
 * @public
 */
export declare type BatchItemFailureResponse = SQSBatchItemFailure;
/**
 * The possible options of response for {@link AwsSimpleAdapter}
 *
 * @breadcrumb Adapters / AWS / AWS Simple Adapter
 * @public
 */
export declare type AWSSimpleAdapterResponseType = BatchItemFailureResponse | IEmptyResponse;
/**
 * The abstract adapter to use to implement other simple AWS adapters
 *
 * @breadcrumb Adapters / AWS / AWS Simple Adapter
 * @public
 */
export declare abstract class AwsSimpleAdapter<TEvent> implements AdapterContract<TEvent, Context, AWSSimpleAdapterResponseType> {
    protected readonly options: AWSSimpleAdapterOptions;
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link AwsSimpleAdapter}
     */
    constructor(options: AWSSimpleAdapterOptions);
    /**
     * {@inheritDoc}
     */
    getAdapterName(): string;
    /**
     * {@inheritDoc}
     */
    canHandle(event: unknown): event is TEvent;
    /**
     * {@inheritDoc}
     */
    getRequest(event: TEvent): AdapterRequest;
    /**
     * {@inheritDoc}
     */
    getResponse({ body, headers, isBase64Encoded, event, statusCode, }: GetResponseAdapterProps<TEvent>): AWSSimpleAdapterResponseType;
    /**
     * {@inheritDoc}
     */
    onErrorWhileForwarding({ error, delegatedResolver, }: OnErrorProps<TEvent, AWSSimpleAdapterResponseType>): void;
    /**
     * Check if the status code is invalid
     *
     * @param statusCode - The status code
     */
    protected hasInvalidStatusCode(statusCode: number): boolean;
}
export declare type __ΩAWSSimpleAdapterOptions = any[];
export declare type __ΩBatchItemFailureResponse = any[];
export declare type __ΩAWSSimpleAdapterResponseType = any[];
