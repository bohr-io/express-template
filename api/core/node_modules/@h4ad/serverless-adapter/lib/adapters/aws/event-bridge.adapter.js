"use strict";
//#region Imports
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBridgeAdapter = exports.__ΩEventBridgeEventAll = exports.__ΩEventBridgeOptions = void 0;
const core_1 = require("../../core");
const index_1 = require("./base/index");
const __ΩEventBridgeOptions = ['eventBridgeForwardPath', 'eventBridgeForwardMethod', 'P&4!8&4"8M'];
exports.__ΩEventBridgeOptions = __ΩEventBridgeOptions;
const __ΩEventBridgeEventAll = ['"'];
exports.__ΩEventBridgeEventAll = __ΩEventBridgeEventAll;
/**
 * The adapter to handle requests from AWS EventBridge (Cloudwatch Events).
 *
 * The option of `responseWithErrors` is ignored by this adapter and we always call `resolver.fail` with the error.
 *
 * {@link https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents.html | Event Reference}
 *
 * @example
 * ```typescript
 * const eventBridgeForwardPath = '/your/route/eventbridge'; // default /eventbridge
 * const eventBridgeForwardMethod = 'POST'; // default POST
 * const adapter = new EventBridgeAdapter({ eventBridgeForwardPath, eventBridgeForwardMethod });
 * ```
 *
 * @breadcrumb Adapters / AWS / EventBridgeAdapter
 * @public
 */
class EventBridgeAdapter extends index_1.AwsSimpleAdapter {
    //#region Constructor
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link EventBridgeAdapter}
     */
    constructor(options) {
        super({
            forwardPath: (0, core_1.getDefaultIfUndefined)(options === null || options === void 0 ? void 0 : options.eventBridgeForwardPath, '/eventbridge'),
            forwardMethod: (0, core_1.getDefaultIfUndefined)(options === null || options === void 0 ? void 0 : options.eventBridgeForwardMethod, 'POST'),
            batch: false,
            host: 'events.amazonaws.com',
        });
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    getAdapterName() {
        return EventBridgeAdapter.name;
    }
    /**
     * {@inheritDoc}
     */
    canHandle(event) {
        const eventBridgeEvent = event;
        // thanks to @cnuss in https://github.com/vendia/serverless-express/blob/b5da6070b8dd2fb674c1f7035dd7edfef1dc83a2/src/event-sources/utils.js#L87
        return !!(eventBridgeEvent &&
            eventBridgeEvent.version &&
            eventBridgeEvent.version === '0' &&
            eventBridgeEvent.id &&
            eventBridgeEvent['detail-type'] &&
            eventBridgeEvent.source &&
            eventBridgeEvent.account &&
            eventBridgeEvent.time &&
            eventBridgeEvent.region &&
            eventBridgeEvent.resources &&
            Array.isArray(eventBridgeEvent.resources) &&
            eventBridgeEvent.detail &&
            typeof eventBridgeEvent.detail === 'object' &&
            !Array.isArray(eventBridgeEvent.detail));
    }
}
exports.EventBridgeAdapter = EventBridgeAdapter;
EventBridgeAdapter.__type = [() => __ΩEventBridgeEventAll, () => index_1.AwsSimpleAdapter, () => __ΩEventBridgeOptions, 'options', 'constructor', 'getAdapterName', 'event', 'canHandle', () => __ΩEventBridgeEventAll, 'Pn!7"Pn#2$8"0%P&0&P#2\'!0(5n)6"'];
//# sourceMappingURL=event-bridge.adapter.js.map