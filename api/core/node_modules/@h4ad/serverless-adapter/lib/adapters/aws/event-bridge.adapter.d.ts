import type { EventBridgeEvent } from 'aws-lambda';
import { AwsSimpleAdapter } from './base/index';
/**
 * The options to customize the {@link EventBridgeAdapter}
 *
 * @breadcrumb Adapters / AWS / EventBridgeAdapter
 * @public
 */
export interface EventBridgeOptions {
    /**
     * The path that will be used to create a request to be forwarded to the framework.
     *
     * @defaultValue /eventbridge
     */
    eventBridgeForwardPath?: string;
    /**
     * The http method that will be used to create a request to be forwarded to the framework.
     *
     * @defaultValue POST
     */
    eventBridgeForwardMethod?: string;
}
/**
 * Just a type alias to ignore generic types in the event
 *
 * @breadcrumb Adapters / AWS / EventBridgeAdapter
 * @public
 */
export declare type EventBridgeEventAll = EventBridgeEvent<any, any>;
/**
 * The adapter to handle requests from AWS EventBridge (Cloudwatch Events).
 *
 * The option of `responseWithErrors` is ignored by this adapter and we always call `resolver.fail` with the error.
 *
 * {@link https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents.html | Event Reference}
 *
 * @example
 * ```typescript
 * const eventBridgeForwardPath = '/your/route/eventbridge'; // default /eventbridge
 * const eventBridgeForwardMethod = 'POST'; // default POST
 * const adapter = new EventBridgeAdapter({ eventBridgeForwardPath, eventBridgeForwardMethod });
 * ```
 *
 * @breadcrumb Adapters / AWS / EventBridgeAdapter
 * @public
 */
export declare class EventBridgeAdapter extends AwsSimpleAdapter<EventBridgeEventAll> {
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link EventBridgeAdapter}
     */
    constructor(options?: EventBridgeOptions);
    /**
     * {@inheritDoc}
     */
    getAdapterName(): string;
    /**
     * {@inheritDoc}
     */
    canHandle(event: unknown): event is EventBridgeEventAll;
}
export declare type __ΩEventBridgeOptions = any[];
export declare type __ΩEventBridgeEventAll = any[];
