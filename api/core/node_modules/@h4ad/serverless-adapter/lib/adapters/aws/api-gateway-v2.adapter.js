"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayV2Adapter = exports.__ΩApiGatewayV2Options = void 0;
const { __ΩAdapterRequest } = require('../../contracts');
const { __ΩGetResponseAdapterProps } = require('../../contracts');
const { __ΩOnErrorProps } = require('../../contracts');
const core_1 = require("../../core");
const __ΩApiGatewayV2Options = ['stripBasePath', 'P&4!8M'];
exports.__ΩApiGatewayV2Options = __ΩApiGatewayV2Options;
/**
 * The adapter to handle requests from AWS Api Gateway V2
 *
 * As per {@link https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-known-issues.html | know issues}, we throw an exception when you send the `transfer-encoding=chunked`, currently, API Gateway doesn't support chunked transfer.
 *
 * @example
 * ```typescript
 * const stripBasePath = '/any/custom/base/path'; // default ''
 * const adapter = new ApiGatewayV2Adapter({ stripBasePath });
 * ```
 *
 * {@link https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html | Event Reference}
 *
 * @breadcrumb Adapters / AWS / ApiGatewayV2Adapter
 * @public
 */
class ApiGatewayV2Adapter {
    //#region Constructor
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link ApiGatewayV2Adapter}
     */
    constructor(options) {
        this.options = options;
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    getAdapterName() {
        return ApiGatewayV2Adapter.name;
    }
    /**
     * {@inheritDoc}
     */
    canHandle(event) {
        const apiGatewayEvent = event;
        return !!((apiGatewayEvent === null || apiGatewayEvent === void 0 ? void 0 : apiGatewayEvent.requestContext) && apiGatewayEvent.version === '2.0');
    }
    /**
     * {@inheritDoc}
     */
    getRequest(event) {
        const method = event.requestContext.http.method;
        const path = this.getPathFromEvent(event);
        const headers = (0, core_1.getFlattenedHeadersMap)(event.headers, ',', true);
        if (event.cookies)
            headers.cookie = event.cookies.join('; ');
        let body;
        if (event.body) {
            const [bufferBody, contentLength] = (0, core_1.getEventBodyAsBuffer)(event.body, event.isBase64Encoded);
            body = bufferBody;
            headers['content-length'] = String(contentLength);
        }
        const remoteAddress = event.requestContext.http.sourceIp;
        return {
            method,
            headers,
            body,
            remoteAddress,
            path,
        };
    }
    /**
     * {@inheritDoc}
     */
    getResponse({ headers: responseHeaders, body, isBase64Encoded, statusCode, response, }) {
        const headers = (0, core_1.getFlattenedHeadersMap)(responseHeaders);
        const multiValueHeaders = (0, core_1.getMultiValueHeadersMap)(responseHeaders);
        const transferEncodingHeader = headers['transfer-encoding'];
        const hasTransferEncodingChunked = transferEncodingHeader && transferEncodingHeader.includes('chunked');
        if (hasTransferEncodingChunked) {
            throw new Error('chunked encoding in headers is not supported by API Gateway V2');
        }
        if (response === null || response === void 0 ? void 0 : response.chunkedEncoding) {
            throw new Error('chunked encoding in response is not supported by API Gateway V2');
        }
        const cookies = multiValueHeaders['set-cookie'];
        if (headers)
            delete headers['set-cookie'];
        return {
            statusCode,
            body,
            headers,
            isBase64Encoded,
            cookies,
        };
    }
    /**
     * {@inheritDoc}
     */
    onErrorWhileForwarding({ error, delegatedResolver, respondWithErrors, event, log, }) {
        const body = respondWithErrors ? error.stack : '';
        const errorResponse = this.getResponse({
            event,
            statusCode: 500,
            body: body || '',
            headers: {},
            isBase64Encoded: false,
            log,
        });
        delegatedResolver.succeed(errorResponse);
    }
    //#endregion
    //#region Protected Methods
    /**
     * Get path from event with query strings
     *
     * @param event - The event sent by serverless
     */
    getPathFromEvent(event) {
        var _a;
        const stripBasePath = (0, core_1.getDefaultIfUndefined)((_a = this.options) === null || _a === void 0 ? void 0 : _a.stripBasePath, '');
        const replaceRegex = new RegExp(`^${stripBasePath}`);
        const path = event.rawPath.replace(replaceRegex, '');
        const queryParams = event.rawQueryString;
        return (0, core_1.getPathWithQueryStringParams)(path, queryParams || {});
    }
}
exports.ApiGatewayV2Adapter = ApiGatewayV2Adapter;
ApiGatewayV2Adapter.__type = [() => __ΩApiGatewayV2Options, 'options', 'constructor', 'getAdapterName', 'event', 'canHandle', () => __ΩAdapterRequest, 'getRequest', () => __ΩGetResponseAdapterProps, 'param0', 'getResponse', () => __ΩOnErrorProps, 'onErrorWhileForwarding', 'getPathFromEvent', 'Pn!2"8<9"0#P&0$P#2%!0&P"2%n\'0(P"o)"2*"0+P""o,#2*$0-P"2%&0.<5"""6$'];
//# sourceMappingURL=api-gateway-v2.adapter.js.map