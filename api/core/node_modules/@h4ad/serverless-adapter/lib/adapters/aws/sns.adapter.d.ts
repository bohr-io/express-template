import type { SNSEvent } from 'aws-lambda';
import { AwsSimpleAdapter } from './base/index';
/**
 * The options to customize the {@link SNSAdapter}
 *
 * @breadcrumb Adapters / AWS / SNSAdapter
 * @public
 */
export interface SNSAdapterOptions {
    /**
     * The path that will be used to create a request to be forwarded to the framework.
     *
     * @defaultValue /sns
     */
    snsForwardPath?: string;
    /**
     * The http method that will be used to create a request to be forwarded to the framework.
     *
     * @defaultValue POST
     */
    snsForwardMethod?: string;
}
/**
 * The adapter to handle requests from AWS SNS.
 *
 * The option of `responseWithErrors` is ignored by this adapter and we always call `resolver.fail` with the error.
 *
 * {@link https://docs.aws.amazon.com/pt_br/lambda/latest/dg/with-sns.html | Event Reference}
 *
 * @example
 * ```typescript
 * const snsForwardPath = '/your/route/sns'; // default /sns
 * const snsForwardMethod = 'POST'; // default POST
 * const adapter = new SNSAdapter({ snsForwardPath, snsForwardMethod });
 * ```
 *
 * @breadcrumb Adapters / AWS / SNSAdapter
 * @public
 */
export declare class SNSAdapter extends AwsSimpleAdapter<SNSEvent> {
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link SNSAdapter}
     */
    constructor(options?: SNSAdapterOptions);
    /**
     * {@inheritDoc}
     */
    getAdapterName(): string;
    /**
     * {@inheritDoc}
     */
    canHandle(event: unknown): event is SNSEvent;
}
export declare type __Î©SNSAdapterOptions = any[];
