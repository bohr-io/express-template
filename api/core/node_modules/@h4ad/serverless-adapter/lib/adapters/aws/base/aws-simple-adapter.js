"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsSimpleAdapter = exports.__ΩAWSSimpleAdapterResponseType = exports.__ΩBatchItemFailureResponse = exports.__ΩAWSSimpleAdapterOptions = void 0;
const { __ΩAdapterRequest } = require('../../../contracts/index');
const { __ΩGetResponseAdapterProps } = require('../../../contracts/index');
const { __ΩOnErrorProps } = require('../../../contracts/index');
const { __ΩIEmptyResponse } = require('../../../core/index');
const index_1 = require("../../../core/index");
const __ΩAWSSimpleAdapterOptions = ['forwardPath', 'forwardMethod', 'host', true, false, 'batch', 'P&4!&4"&4#P.$.%J4&8M'];
exports.__ΩAWSSimpleAdapterOptions = __ΩAWSSimpleAdapterOptions;
const __ΩBatchItemFailureResponse = ['"'];
exports.__ΩBatchItemFailureResponse = __ΩBatchItemFailureResponse;
const __ΩAWSSimpleAdapterResponseType = [() => __ΩBatchItemFailureResponse, () => __ΩIEmptyResponse, 'Pn!n"J'];
exports.__ΩAWSSimpleAdapterResponseType = __ΩAWSSimpleAdapterResponseType;
/**
 * The abstract adapter to use to implement other simple AWS adapters
 *
 * @breadcrumb Adapters / AWS / AWS Simple Adapter
 * @public
 */
class AwsSimpleAdapter {
    //#region Constructor
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link AwsSimpleAdapter}
     */
    constructor(options) {
        this.options = options;
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    getAdapterName() {
        throw new Error('not implemented.');
    }
    /**
     * {@inheritDoc}
     */
    canHandle(event) {
        throw new Error('not implemented.');
    }
    /**
     * {@inheritDoc}
     */
    getRequest(event) {
        const path = this.options.forwardPath;
        const method = this.options.forwardMethod;
        const [body, contentLength] = (0, index_1.getEventBodyAsBuffer)(JSON.stringify(event), false);
        const headers = {
            host: this.options.host,
            'content-type': 'application/json',
            'content-length': String(contentLength),
        };
        return {
            method,
            headers,
            body,
            path,
        };
    }
    /**
     * {@inheritDoc}
     */
    getResponse({ body, headers, isBase64Encoded, event, statusCode, }) {
        if (this.hasInvalidStatusCode(statusCode)) {
            throw new Error(JSON.stringify({ body, headers, isBase64Encoded, event, statusCode }));
        }
        if (!this.options.batch)
            return index_1.EmptyResponse;
        if (isBase64Encoded) {
            throw new Error('SERVERLESS_ADAPTER: The response could not be base64 encoded when you set batch: true, the response should be a JSON.');
        }
        if (!body)
            return index_1.EmptyResponse;
        return JSON.parse(body);
    }
    /**
     * {@inheritDoc}
     */
    onErrorWhileForwarding({ error, delegatedResolver, }) {
        delegatedResolver.fail(error);
    }
    //#endregion
    //#region Protected Methods
    /**
     * Check if the status code is invalid
     *
     * @param statusCode - The status code
     */
    hasInvalidStatusCode(statusCode) {
        return statusCode < 200 || statusCode >= 400;
    }
}
exports.AwsSimpleAdapter = AwsSimpleAdapter;
AwsSimpleAdapter.__type = ['TEvent', () => __ΩAWSSimpleAdapterOptions, 'options', 'constructor', 'getAdapterName', 'event', 'canHandle', () => __ΩAdapterRequest, 'getRequest', () => __ΩGetResponseAdapterProps, 'param0', () => __ΩAWSSimpleAdapterResponseType, 'getResponse', () => __ΩOnErrorProps, () => __ΩAWSSimpleAdapterResponseType, 'onErrorWhileForwarding', 'statusCode', 'hasInvalidStatusCode', () => __ΩAWSSimpleAdapterResponseType, 'b!Pn"2#<9"0$P&0%P#2&!0\'Pe"!2&n(0)Pe"!o*"2+n,0-Pe"!n/o.#2+$00P\'21)02<5e!!"n36$'];
//# sourceMappingURL=aws-simple-adapter.js.map