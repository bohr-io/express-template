"use strict";
//#region Imports
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Adapter = exports.__ΩS3AdapterOptions = void 0;
const core_1 = require("../../core");
const index_1 = require("./base/index");
const __ΩS3AdapterOptions = ['s3ForwardPath', 's3ForwardMethod', 'P&4!8&4"8M'];
exports.__ΩS3AdapterOptions = __ΩS3AdapterOptions;
/**
 * The adapter to handle requests from AWS S3.
 *
 * The option of `responseWithErrors` is ignored by this adapter and we always call `resolver.fail` with the error.
 *
 * {@link https://docs.aws.amazon.com/pt_br/lambda/latest/dg/with-s3.html | Event Reference}
 *
 * @example
 * ```typescript
 * const s3ForwardPath = '/your/route/s3'; // default /s3
 * const s3ForwardMethod = 'POST'; // default POST
 * const adapter = new S3Adapter({ s3ForwardPath, s3ForwardMethod });
 * ```
 *
 * @breadcrumb Adapters / AWS / S3Adapter
 * @public
 */
class S3Adapter extends index_1.AwsSimpleAdapter {
    //#region Constructor
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link SNSAdapter}
     */
    constructor(options) {
        super({
            forwardPath: (0, core_1.getDefaultIfUndefined)(options === null || options === void 0 ? void 0 : options.s3ForwardPath, '/s3'),
            forwardMethod: (0, core_1.getDefaultIfUndefined)(options === null || options === void 0 ? void 0 : options.s3ForwardMethod, 'POST'),
            batch: false,
            host: 's3.amazonaws.com',
        });
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    getAdapterName() {
        return S3Adapter.name;
    }
    /**
     * {@inheritDoc}
     */
    canHandle(event) {
        var _a;
        const s3Event = event;
        if (!Array.isArray(s3Event === null || s3Event === void 0 ? void 0 : s3Event.Records))
            return false;
        const eventSource = (_a = s3Event.Records[0]) === null || _a === void 0 ? void 0 : _a.eventSource;
        return eventSource === 'aws:s3';
    }
}
exports.S3Adapter = S3Adapter;
S3Adapter.__type = [() => index_1.AwsSimpleAdapter, () => __ΩS3AdapterOptions, 'options', 'constructor', 'getAdapterName', 'event', 'canHandle', 'P"7!Pn"2#8"0$P&0%P#2&!0\'5"6"'];
//# sourceMappingURL=s3.adapter.js.map