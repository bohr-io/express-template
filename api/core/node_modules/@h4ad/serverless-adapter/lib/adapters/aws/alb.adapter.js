"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlbAdapter = exports.__ΩAlbAdapterOptions = void 0;
const { __ΩAdapterRequest } = require('../../contracts');
const { __ΩGetResponseAdapterProps } = require('../../contracts');
const { __ΩOnErrorProps } = require('../../contracts');
const core_1 = require("../../core");
const __ΩAlbAdapterOptions = ['stripBasePath', 'P&4!8M'];
exports.__ΩAlbAdapterOptions = __ΩAlbAdapterOptions;
/**
 * The adapter to handle requests from AWS ALB
 *
 * @example
 * ```typescript
 * const stripBasePath = '/any/custom/base/path'; // default ''
 * const adapter = new AlbAdapter({ stripBasePath });
 * ```
 *
 * {@link https://docs.aws.amazon.com/lambda/latest/dg/services-alb.html | Event Reference}
 *
 * @breadcrumb Adapters / AWS / AlbAdapter
 * @public
 */
class AlbAdapter {
    //#region Constructor
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link AlbAdapter}
     */
    constructor(options) {
        this.options = options;
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    getAdapterName() {
        return AlbAdapter.name;
    }
    /**
     * {@inheritDoc}
     */
    canHandle(event) {
        const albEvent = event;
        return !!((albEvent === null || albEvent === void 0 ? void 0 : albEvent.requestContext) && albEvent.requestContext.elb);
    }
    /**
     * {@inheritDoc}
     */
    getRequest(event) {
        const method = event.httpMethod;
        const path = this.getPathFromEvent(event);
        const headers = event.multiValueHeaders
            ? (0, core_1.getFlattenedHeadersMap)(event.multiValueHeaders, ',', true)
            : event.headers;
        let body;
        if (event.body) {
            const [bufferBody, contentLength] = (0, core_1.getEventBodyAsBuffer)(event.body, event.isBase64Encoded);
            body = bufferBody;
            headers['content-length'] = String(contentLength);
        }
        let remoteAddress = '';
        // ref: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/x-forwarded-headers.html#x-forwarded-for
        if (headers['x-forwarded-for'])
            remoteAddress = headers['x-forwarded-for'];
        return {
            method,
            headers,
            body,
            remoteAddress,
            path,
        };
    }
    /**
     * {@inheritDoc}
     */
    getResponse({ event, headers: responseHeaders, body, isBase64Encoded, statusCode, }) {
        const multiValueHeaders = !event.headers
            ? (0, core_1.getMultiValueHeadersMap)(responseHeaders)
            : undefined;
        const headers = event.headers
            ? (0, core_1.getFlattenedHeadersMap)(responseHeaders)
            : undefined;
        return {
            statusCode,
            body,
            headers,
            multiValueHeaders,
            isBase64Encoded,
        };
    }
    /**
     * {@inheritDoc}
     */
    onErrorWhileForwarding({ error, delegatedResolver, respondWithErrors, event, log, }) {
        const body = respondWithErrors ? error.stack || '' : '';
        const errorResponse = this.getResponse({
            event,
            statusCode: 500,
            body,
            headers: {},
            isBase64Encoded: false,
            log,
        });
        delegatedResolver.succeed(errorResponse);
    }
    //#endregion
    //#region Protected Methods
    /**
     * Get path from event with query strings
     *
     * @param event - The event sent by serverless
     */
    getPathFromEvent(event) {
        var _a;
        const stripBasePath = (0, core_1.getDefaultIfUndefined)((_a = this.options) === null || _a === void 0 ? void 0 : _a.stripBasePath, '');
        const replaceRegex = new RegExp(`^${stripBasePath}`);
        const path = event.path.replace(replaceRegex, '');
        const queryParams = event.headers
            ? event.queryStringParameters
            : event.multiValueQueryStringParameters;
        return (0, core_1.getPathWithQueryStringParams)(path, queryParams || {});
    }
}
exports.AlbAdapter = AlbAdapter;
AlbAdapter.__type = [() => __ΩAlbAdapterOptions, 'options', 'constructor', 'getAdapterName', 'event', 'canHandle', () => __ΩAdapterRequest, 'getRequest', () => __ΩGetResponseAdapterProps, 'param0', 'getResponse', () => __ΩOnErrorProps, 'onErrorWhileForwarding', 'getPathFromEvent', 'Pn!2"8<9"0#P&0$P#2%!0&P"2%n\'0(P"o)"2*"0+P""o,#2*$0-P"2%&0.<5"""6$'];
//# sourceMappingURL=alb.adapter.js.map