"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDBAdapter = exports.__ΩDynamoDBAdapterOptions = void 0;
const { __ΩAWSSimpleAdapterOptions } = require('./base/index');
const __ΩPick = ['T', 'K', 'l+e#!e"!fRb!b"Pde""N#!'];
const core_1 = require("../../core");
const index_1 = require("./base/index");
const __ΩDynamoDBAdapterOptions = [() => __ΩPick, () => __ΩAWSSimpleAdapterOptions, "batch", 'dynamoDBForwardPath', 'dynamoDBForwardMethod', 'Pn".#o!#&4$8&4%8M'];
exports.__ΩDynamoDBAdapterOptions = __ΩDynamoDBAdapterOptions;
/**
 * The adapter to handle requests from AWS DynamoDB.
 *
 * The option of `responseWithErrors` is ignored by this adapter and we always call `resolver.fail` with the error.
 *
 * {@link https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html | Event Reference}
 *
 * @example
 * ```typescript
 * const dynamoDBForwardPath = '/your/route/dynamo'; // default /dynamo
 * const dynamoDBForwardMethod = 'POST'; // default POST
 * const adapter = new DynamoDBAdapter({ dynamoDBForwardPath, dynamoDBForwardMethod });
 * ```
 *
 * @breadcrumb Adapters / AWS / DynamoDBAdapter
 * @public
 */
class DynamoDBAdapter extends index_1.AwsSimpleAdapter {
    //#region Constructor
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link DynamoDBAdapter}
     */
    constructor(options) {
        super({
            forwardPath: (0, core_1.getDefaultIfUndefined)(options === null || options === void 0 ? void 0 : options.dynamoDBForwardPath, '/dynamo'),
            forwardMethod: (0, core_1.getDefaultIfUndefined)(options === null || options === void 0 ? void 0 : options.dynamoDBForwardMethod, 'POST'),
            batch: options === null || options === void 0 ? void 0 : options.batch,
            host: 'dynamodb.amazonaws.com',
        });
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    getAdapterName() {
        return DynamoDBAdapter.name;
    }
    /**
     * {@inheritDoc}
     */
    canHandle(event) {
        var _a;
        const dynamoDBevent = event;
        if (!Array.isArray(dynamoDBevent === null || dynamoDBevent === void 0 ? void 0 : dynamoDBevent.Records))
            return false;
        const eventSource = (_a = dynamoDBevent.Records[0]) === null || _a === void 0 ? void 0 : _a.eventSource;
        return eventSource === 'aws:dynamodb';
    }
}
exports.DynamoDBAdapter = DynamoDBAdapter;
DynamoDBAdapter.__type = [() => index_1.AwsSimpleAdapter, () => __ΩDynamoDBAdapterOptions, 'options', 'constructor', 'getAdapterName', 'event', 'canHandle', 'P"7!Pn"2#8"0$P&0%P#2&!0\'5"6"'];
//# sourceMappingURL=dynamodb.adapter.js.map