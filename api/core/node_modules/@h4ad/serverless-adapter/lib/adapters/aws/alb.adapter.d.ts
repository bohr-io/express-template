import type { ALBEvent, ALBResult, Context } from 'aws-lambda';
import { AdapterContract, AdapterRequest, GetResponseAdapterProps, OnErrorProps } from '../../contracts';
/**
 * The options to customize the {@link AlbAdapter}
 *
 * @breadcrumb Adapters / AWS / AlbAdapter
 * @public
 */
export interface AlbAdapterOptions {
    /**
     * Strip base path for custom domains
     *
     * @defaultValue ''
     */
    stripBasePath?: string;
}
/**
 * The adapter to handle requests from AWS ALB
 *
 * @example
 * ```typescript
 * const stripBasePath = '/any/custom/base/path'; // default ''
 * const adapter = new AlbAdapter({ stripBasePath });
 * ```
 *
 * {@link https://docs.aws.amazon.com/lambda/latest/dg/services-alb.html | Event Reference}
 *
 * @breadcrumb Adapters / AWS / AlbAdapter
 * @public
 */
export declare class AlbAdapter implements AdapterContract<ALBEvent, Context, ALBResult> {
    protected readonly options?: AlbAdapterOptions | undefined;
    /**
     * Default constructor
     *
     * @param options - The options to customize the {@link AlbAdapter}
     */
    constructor(options?: AlbAdapterOptions | undefined);
    /**
     * {@inheritDoc}
     */
    getAdapterName(): string;
    /**
     * {@inheritDoc}
     */
    canHandle(event: unknown): event is ALBEvent;
    /**
     * {@inheritDoc}
     */
    getRequest(event: ALBEvent): AdapterRequest;
    /**
     * {@inheritDoc}
     */
    getResponse({ event, headers: responseHeaders, body, isBase64Encoded, statusCode, }: GetResponseAdapterProps<ALBEvent>): ALBResult;
    /**
     * {@inheritDoc}
     */
    onErrorWhileForwarding({ error, delegatedResolver, respondWithErrors, event, log, }: OnErrorProps<ALBEvent, ALBResult>): void;
    /**
     * Get path from event with query strings
     *
     * @param event - The event sent by serverless
     */
    protected getPathFromEvent(event: ALBEvent): string;
}
export declare type __Î©AlbAdapterOptions = any[];
