"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloServerMutationAdapter = exports.__ΩApolloServerMutationAdapterOptions = void 0;
const { __ΩILogger } = require('../../core');
const { __ΩAdapterRequest } = require('../../contracts');
const { __ΩGetResponseAdapterProps } = require('../../contracts');
const { __ΩOnErrorProps } = require('../../contracts');
const core_1 = require("../../core");
const __ΩApolloServerMutationAdapterOptions = ['mutationName', 'mutationResultQuery', 'P&4!&4"8M'];
exports.__ΩApolloServerMutationAdapterOptions = __ΩApolloServerMutationAdapterOptions;
/**
 * The adapter that wraps another adapter to force a transformation of the event data as a mutation to Apollo Server be able to handle.
 *
 * @breadcrumb Adapters / Apollo Server / ApolloServerMutationAdapter
 * @public
 */
class ApolloServerMutationAdapter {
    //#region Constructor
    /**
     * The default constructor
     */
    constructor(baseAdapter, options) {
        this.baseAdapter = baseAdapter;
        this.options = options;
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    canHandle(event, context, log) {
        return this.baseAdapter.canHandle(event, context, log);
    }
    /**
     * {@inheritDoc}
     */
    getAdapterName() {
        return this.baseAdapter.getAdapterName() + 'Mutation';
    }
    /**
     * {@inheritDoc}
     */
    getRequest(event, context, log) {
        var _a;
        const request = this.baseAdapter.getRequest(event, context, log);
        request.method = 'POST';
        const operationName = this.options.mutationName;
        const mutationResultQuery = (0, core_1.getDefaultIfUndefined)(this.options.mutationResultQuery, '{ __typename }');
        const mutationBody = JSON.stringify({
            operationName,
            query: `mutation ${operationName} ($event: String) { ${operationName} (event: $event) ${mutationResultQuery} }`,
            variables: {
                event: ((_a = request.body) === null || _a === void 0 ? void 0 : _a.toString()) || '',
            },
        });
        const [buffer, contentLength] = (0, core_1.getEventBodyAsBuffer)(mutationBody, false);
        request.body = buffer;
        request.headers['content-type'] = 'application/json';
        request.headers['content-length'] = String(contentLength);
        return request;
    }
    /**
     * {@inheritDoc}
     */
    getResponse(props) {
        const { data, errors } = JSON.parse(props.body);
        if (!errors) {
            return this.baseAdapter.getResponse({
                ...props,
                body: JSON.stringify(data[this.options.mutationName]),
            });
        }
        // when error happens, is the responsability of base adapter
        // to deal with error status code.
        return this.baseAdapter.getResponse(props);
    }
    /**
     * {@inheritDoc}
     */
    onErrorWhileForwarding(props) {
        return this.baseAdapter.onErrorWhileForwarding(props);
    }
}
exports.ApolloServerMutationAdapter = ApolloServerMutationAdapter;
ApolloServerMutationAdapter.__type = ['TEvent', 'TContext', 'TResponse', 'TBaseAdapter', 'baseAdapter', () => __ΩApolloServerMutationAdapterOptions, 'options', 'constructor', 'event', 'context', () => __ΩILogger, 'log', 'canHandle', 'getAdapterName', () => __ΩILogger, () => __ΩAdapterRequest, 'getRequest', () => __ΩGetResponseAdapterProps, 'props', 'getResponse', () => __ΩOnErrorProps, 'onErrorWhileForwarding', 'b!b"b#b$Pe"$2%<9n&2\'<9"0(P#2)e""2*n+2,)0-P&0.Pe"!2)e""2*n/2,n001Pe"!o2"23e"#04Pe"!e"#o5#23$065e!!e!"e!#6$'];
//# sourceMappingURL=apollo-server-mutation.adapter.js.map