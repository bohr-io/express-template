"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CorsFramework = exports.__ΩCorsFrameworkOptions = void 0;
const { __ΩFrameworkContract } = require('../../contracts');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const __ΩReturnType = ['T', 'args', '', 'l>e"!R"RPde#!P"@2"h"!/#qk#\'QRb!Pde"!p)'];
const cors_1 = __importDefault(require("cors"));
const core_1 = require("../../core");
const __ΩCorsFrameworkOptions = ['forbiddenOnInvalidOriginOrMethod', 'P!P)4!8MK'];
exports.__ΩCorsFrameworkOptions = __ΩCorsFrameworkOptions;
/**
 * The framework that handles cors for your api without relying on internals of the framework
 *
 * @example
 * ```typescript
 * import express from 'express';
 * import { ServerlessAdapter } from '@h4ad/serverless-adapter';
 * import { ExpressFramework } from '@h4ad/serverless-adapter/lib/frameworks/express';
 * import { CorsFramework } from '@h4ad/serverless-adapter/lib/frameworks/cors';
 *
 * const expressFramework = new ExpressFramework();
 * const options: CorsOptions = {}; // customize the options
 * const framework = new CorsFramework(expressFramework, options);
 *
 * export const handler = ServerlessAdapter.new(null)
 *   .setFramework(framework)
 *   // set other configurations and then build
 *   .build();
 * ```
 *
 * @breadcrumb Frameworks / CorsFramework
 * @public
 */
class CorsFramework {
    //#region Constructor
    /**
     * Default Constructor
     */
    constructor(framework, options) {
        this.framework = framework;
        this.options = options;
        //#endregion
        /**
         * All cors headers that can be added by cors package
         */
        this.corsHeaders = [
            'Access-Control-Max-Age',
            'Access-Control-Expose-Headers',
            'Access-Control-Allow-Headers',
            'Access-Control-Request-Headers',
            'Access-Control-Allow-Credentials',
            'Access-Control-Allow-Methods',
            'Access-Control-Allow-Origin',
        ];
        this.cachedCorsInstance = (0, cors_1.default)(this.options);
    }
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    sendRequest(app, request, response) {
        this.cachedCorsInstance(request, response, this.onCorsNext(app, request, response));
    }
    //#endregion
    //#region Protected Methods
    /**
     * Handle next execution called by the cors package
     */
    onCorsNext(app, request, response) {
        return () => {
            var _a;
            this.formatHeaderValuesAddedByCorsPackage(response);
            const errorOnInvalidOrigin = (0, core_1.getDefaultIfUndefined)((_a = this.options) === null || _a === void 0 ? void 0 : _a.forbiddenOnInvalidOriginOrMethod, true);
            if (errorOnInvalidOrigin) {
                const allowedOrigin = response.getHeader('access-control-allow-origin');
                const isInvalidOrigin = this.isInvalidOriginOrMethodIsNotAllowed(request, allowedOrigin);
                if (isInvalidOrigin) {
                    response.statusCode = 403;
                    response.setHeader('Content-Type', 'text/plain');
                    response.end([
                        'Invalid HTTP Access Control (CORS) request:',
                        `  Origin: ${request.headers.origin}`,
                        `  Method: ${request.method}`,
                    ].join('\n'));
                    return;
                }
            }
            this.framework.sendRequest(app, request, response);
        };
    }
    /**
     * Format the headers to be standardized with the rest of the library, such as ApiGatewayV2.
     * Also, some frameworks don't support headers as an array, so we need to format the values.
     */
    formatHeaderValuesAddedByCorsPackage(response) {
        for (const corsHeader of this.corsHeaders) {
            const value = response.getHeader(corsHeader);
            if (value === undefined)
                continue;
            response.removeHeader(corsHeader);
            response.setHeader(corsHeader.toLowerCase(), Array.isArray(value) ? value.join(',') : value);
        }
    }
    /**
     * Check if the origin is invalid or if the method is not allowed.
     * Highly inspired by [access-control](https://github.com/primus/access-control/blob/master/index.js#L95-L115)
     */
    isInvalidOriginOrMethodIsNotAllowed(request, allowedOrigin) {
        var _a;
        if (!allowedOrigin)
            return true;
        if (!!request.headers.origin &&
            allowedOrigin !== '*' &&
            request.headers.origin !== allowedOrigin)
            return true;
        const notPermitedInMethods = this.options &&
            Array.isArray(this.options.methods) &&
            this.options.methods.every(__assignType(m => { var _a; return m.toLowerCase() !== ((_a = request.method) === null || _a === void 0 ? void 0 : _a.toLowerCase()); }, ['m', '', 'P"2!"/"']));
        const differentMethod = this.options &&
            typeof this.options.methods === 'string' &&
            this.options.methods
                .split(',')
                .every(__assignType(m => { var _a; return m.trim().toLowerCase() !== ((_a = request.method) === null || _a === void 0 ? void 0 : _a.toLowerCase()); }, ['m', '', 'P"2!"/"']));
        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.methods) && (notPermitedInMethods || differentMethod))
            return true;
        return false;
    }
}
exports.CorsFramework = CorsFramework;
CorsFramework.__type = ['TApp', () => __ΩFrameworkContract, 'framework', () => __ΩCorsFrameworkOptions, 'options', 'constructor', 'corsHeaders', function () { return [
        'Access-Control-Max-Age',
        'Access-Control-Expose-Headers',
        'Access-Control-Allow-Headers',
        'Access-Control-Request-Headers',
        'Access-Control-Allow-Credentials',
        'Access-Control-Allow-Methods',
        'Access-Control-Allow-Origin',
    ]; }, () => __ΩReturnType, () => cors_1.default, 'cachedCorsInstance', 'app', 'request', 'response', 'sendRequest', '', 'onCorsNext', 'formatHeaderValuesAddedByCorsPackage', 'allowedOrigin', 'isInvalidOriginOrMethodIsNotAllowed', 'b!Pe"!o""2#<9n$2%8<9"0&&F3\'9<>(i*o)"3+9<Pe"!2,!2-!2.$0/Pe"!2,!2-!2.P$/001<P!2.$02<P!2-P\'&&F-J23)04<5e!!6"'];
//# sourceMappingURL=cors.framework.js.map