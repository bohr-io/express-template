"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrpcFramework = exports.__ΩTrpcFrameworkOptions = exports.__ΩTrpcAdapterContext = exports.__ΩTrpcAdapterBaseContext = exports.BufferToJSObjectTransformer = void 0;
const { __ΩSingleValueHeaders } = require('../../@types');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const __ΩPick = ['T', 'K', 'l+e#!e"!fRb!b"Pde""N#!'];
const __ΩExclude = ['T', 'U', 'l6!Re$!RPe#!e$"qk#%QRb!b"Pde"!p)'];
const __ΩOmit = ['T', 'K', () => __ΩPick, () => __ΩExclude, 'b!b"e!!e!!ge!"o$#o##'];
const node_http_1 = require("@trpc/server/adapters/node-http");
const core_1 = require("../../core");
//#endregion
/**
 * The transformer that is responsible to transform buffer's input to javascript objects
 *
 * @breadcrumb Frameworks / TrpcFramework
 * @public
 */
class BufferToJSObjectTransformer {
    /**
     * Deserialize unknown values to javascript objects
     *
     * @param value - The value to be deserialized
     */
    deserialize(value) {
        if (value instanceof Buffer)
            return JSON.parse(value.toString('utf-8'));
        return value;
    }
    /**
     * The value to be serialized, do nothing because tRPC can handle.
     *
     * @param value - The value to be serialized
     */
    serialize(value) {
        return value;
    }
}
exports.BufferToJSObjectTransformer = BufferToJSObjectTransformer;
BufferToJSObjectTransformer.__type = ['value', 'deserialize', 'serialize', 'P#2!8"0"P"2!"0#5'];
const __ΩTrpcAdapterBaseContext = ['request', 'response', 'statusCode', 'setStatus', 'name', 'value', 'setHeader', 'removeHeader', 'getHeader', () => __ΩSingleValueHeaders, 'getHeaders', 'getIp', 'getUrl', 'getMethod', 'P!4!!4"P\'2#$1$P&2%P\'&J2&$1\'P&2%$1(P&2%P&-J1)Pn*1+PP&-J1,PP&-J1-PP&-J1.M'];
exports.__ΩTrpcAdapterBaseContext = __ΩTrpcAdapterBaseContext;
const __ΩTrpcAdapterContext = ['TContext', () => __ΩTrpcAdapterBaseContext, 'b!Pe"!n"K'];
exports.__ΩTrpcAdapterContext = __ΩTrpcAdapterContext;
const __ΩTrpcFrameworkOptions = ['TContext', () => __ΩOmit, "router", "createContext", 'opts', () => __ΩOmit, () => __ΩTrpcAdapterBaseContext, () => __ΩOmit, () => __ΩTrpcAdapterBaseContext, '', 'createContext', 'b!P"P.#.$Jo"#PP"2%Pe%!n\'go&#e%!n)go(#`J/*4+8MK'];
exports.__ΩTrpcFrameworkOptions = __ΩTrpcFrameworkOptions;
/**
 * The framework that forwards requests to TRPC handler
 *
 * @breadcrumb Frameworks / TrpcFramework
 * @public
 */
class TrpcFramework {
    //#region Constructor
    /**
     * Default constructor
     */
    constructor(options) {
        this.options = options;
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    sendRequest(app, request, response) {
        const endpoint = this.getSafeUrlForTrpc(request);
        (0, node_http_1.nodeHTTPRequestHandler)({
            req: request,
            res: response,
            path: endpoint,
            router: app,
            ...this.options,
            createContext: __assignType(createContextOptions => this.mergeDefaultContextWithOptionsContext(createContextOptions), ['createContextOptions', '', 'P"2!"/"']),
        });
    }
    //#endregion
    //#region Protected Methods
    /**
     * Get safe url that can be used inside Trpc.
     *
     * @example
     * ```typescript
     * const url = getSafeUrlForTrpc('/users?input=hello');
     * console.log(url); // users
     * ```
     *
     * @param request - The request object that will be forward to your app
     */
    getSafeUrlForTrpc(request) {
        let url = request.url;
        if (url.startsWith('/'))
            url = url.slice(1);
        if (url.includes('?'))
            url = url.split('?')[0];
        return url;
    }
    /**
     * Merge the default context ({@link TrpcAdapterContext}) with the context created by the user.
     *
     * @param createContextOptions - The options sent by trpc to create the context
     */
    mergeDefaultContextWithOptionsContext(createContextOptions) {
        var _a;
        const createContextFromOptions = (0, core_1.getDefaultIfUndefined)((_a = this.options) === null || _a === void 0 ? void 0 : _a.createContext, () => undefined);
        const resolvedContext = createContextFromOptions(createContextOptions);
        if (resolvedContext && resolvedContext.then) {
            return resolvedContext.then(__assignType(context => this.wrapResolvedContextWithDefaultContext(context, createContextOptions), ['context', '', 'P"2!"/"']));
        }
        return this.wrapResolvedContextWithDefaultContext(resolvedContext, createContextOptions);
    }
    /**
     * Wraps the resolved context from the {@link TrpcFrameworkOptions} created with `createContext` and merge
     * with the {@link TrpcAdapterContext} generated by the library.
     *
     * @param resolvedContext - The context created with `createContext` inside {@link TrpcFrameworkOptions}
     * @param createContextOptions - The options sent by trpc to create the context
     */
    wrapResolvedContextWithDefaultContext(resolvedContext, createContextOptions) {
        const request = createContextOptions.req;
        const response = createContextOptions.res;
        return {
            ...resolvedContext,
            request,
            response,
            getUrl: () => request.url,
            getMethod: () => request.method,
            getHeaders: () => (0, core_1.getFlattenedHeadersMap)(request.headers, ',', true),
            setHeader: __assignType((header, value) => {
                response.setHeader(header, value);
            }, ['header', 'value', '', 'P"2!"2""/#']),
            removeHeader: __assignType(header => {
                response.removeHeader(header);
            }, ['header', '', 'P"2!"/"']),
            getHeader: __assignType((header) => {
                return (0, core_1.getFlattenedHeadersMap)(request.headers, ',', true)[header.toLowerCase()];
            }, ['header', '', 'P&2!"/"']),
            setStatus: __assignType((statusCode) => {
                response.statusCode = statusCode;
                // force undefined to get default message for the status code
                // ref: https://nodejs.org/dist/latest-v16.x/docs/api/http.html#responsestatusmessage
                response.statusMessage = undefined;
            }, ['statusCode', '', 'P\'2!"/"']),
            getIp: () => request.connection.remoteAddress,
        };
    }
}
exports.TrpcFramework = TrpcFramework;
TrpcFramework.__type = ['TContext', () => __ΩTrpcFrameworkOptions, 'options', 'constructor', 'app', 'request', 'response', 'sendRequest', 'getSafeUrlForTrpc', 'createContextOptions', 'mergeDefaultContextWithOptionsContext', 'resolvedContext', 'wrapResolvedContextWithDefaultContext', 'b!Pe"!o""2#8<9"0$P"2%!2&!2\'$0(P!2&&0)<P"2*Pe#!e#!`J0+<Pe"!2,"2*e"!0-<5"6"'];
//# sourceMappingURL=trpc.framework.js.map