"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyFramework = void 0;
const { __ΩFrameworkContract } = require('../../contracts');
const { __ΩILogger } = require('../../core');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const __ΩError = ['name', 'message', 'stack', 'P&4!&4"&4#8M'];
const core_1 = require("../../core");
//#endregion
/**
 * The framework that asynchronously instantiates your application and forwards the request to the framework as quickly as possible.
 *
 * @example
 * ```typescript
 * import express from 'express';
 * import { ServerlessAdapter } from '@h4ad/serverless-adapter';
 * import { ExpressFramework } from '@h4ad/serverless-adapter/lib/frameworks/express';
 * import { LazyFramework } from '@h4ad/serverless-adapter/lib/frameworks/lazy';
 *
 * const expressFramework = new ExpressFramework();
 * const factory = async () => {
 *   const app = express();
 *
 *   // do some asynchronous stuffs like create the database;
 *   await new Promise(resolve => setTimeout(resolve, 100);
 *
 *   return app;
 * };
 * const framework = new LazyFramework(expressFramework, factory);
 *
 * export const handler = ServerlessAdapter.new(null)
 *   .setFramework(framework)
 *   // set other configurations and then build
 *   .build();
 * ```
 *
 * @breadcrumb Frameworks / LazyFramework
 * @public
 */
class LazyFramework {
    //#region Constructor
    /**
     * Default Constructor
     */
    constructor(framework, factory, logger = (0, core_1.createDefaultLogger)()) {
        this.framework = framework;
        this.factory = factory;
        this.logger = logger;
        this.delayedFactory = Promise.resolve()
            .then(() => factory())
            .then(__assignType(app => {
            this.cachedApp = app;
        }, ['app', '', 'P"2!"/"']))
            .catch(__assignType((error) => {
            // deal with the error only when receive some request
            // to be able to return some message to user
            this.logger.error('SERVERLESS_ADAPTER:LAZY_FRAMEWORK: An error occours during the creation of your app.');
            this.logger.error(error);
        }, [() => __ΩError, 'error', '', 'Pn!2""/#']));
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    sendRequest(app, request, response) {
        if (this.cachedApp)
            return this.framework.sendRequest(this.cachedApp, request, response);
        this.delayedFactory.then(() => {
            if (!this.cachedApp) {
                return response.emit('error', new Error('SERVERLESS_ADAPTER:LAZY_FRAMEWORK: The instance of the app returned by the factory is not valid, see the logs to learn more.'));
            }
            return this.framework.sendRequest(this.cachedApp, request, response);
        });
    }
}
exports.LazyFramework = LazyFramework;
LazyFramework.__type = ['TApp', () => __ΩFrameworkContract, 'framework', '', 'factory', () => __ΩILogger, 'logger', () => (0, core_1.createDefaultLogger)(), 'constructor', 'cachedApp', 'delayedFactory', 'app', 'request', 'response', 'sendRequest', 'b!Pe"!o""2#<9Pe#!`/$2%<9n&2\'<9>("0)e!!3*8<$`3+9<P,2,!2-!2.$0/5,6"'];
//# sourceMappingURL=lazy.framework.js.map