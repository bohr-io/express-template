"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseBodyParserFramework = exports.__ΩBodyParserOptions = void 0;
const { __ΩFrameworkContract } = require('../../contracts');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const __ΩNonNullable = ['T', 'l7!Re$!RPe#!P,-Jqk#%QRb!Pde"!p)'];
const core_1 = require("../../core");
const __ΩBodyParserOptions = ['request', 'response', 'error', '', 'customErrorHandler', 'PP!2!!2"!2#$/$4%8M'];
exports.__ΩBodyParserOptions = __ΩBodyParserOptions;
/**
 * The base class used by other body-parser functions to parse a specific content-type
 *
 * @breadcrumb Frameworks / BodyParserFramework
 * @public
 */
class BaseBodyParserFramework {
    //#region Constructor
    /**
     * Default Constructor
     */
    constructor(framework, middleware, options) {
        var _a;
        this.framework = framework;
        this.middleware = middleware;
        this.options = options;
        this.errorHandler = (0, core_1.getDefaultIfUndefined)((_a = this.options) === null || _a === void 0 ? void 0 : _a.customErrorHandler, this.defaultHandleOnError.bind(this));
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    sendRequest(app, request, response) {
        this.middleware(request, response, this.onBodyParserFinished(app, request, response));
    }
    //#endregion
    //#region Protected Methods
    /**
     * Handle next execution called by the cors package
     */
    onBodyParserFinished(app, request, response) {
        return __assignType((err) => {
            if (err)
                return this.errorHandler(request, response, err);
            this.framework.sendRequest(app, request, response);
        }, ['err', '', 'P"2!8"/"']);
    }
    /**
     * The default function to handle errors
     *
     * @param request - The referecene for request
     * @param response - The reference for response
     * @param error - The error throwed by body-parser
     */
    defaultHandleOnError(request, response, error) {
        response.setHeader('content-type', 'text/plain');
        response.statusCode = error.statusCode;
        response.end(error.message);
    }
}
exports.BaseBodyParserFramework = BaseBodyParserFramework;
BaseBodyParserFramework.__type = ['TApp', () => __ΩFrameworkContract, 'framework', 'middleware', () => __ΩBodyParserOptions, 'options', 'constructor', () => __ΩNonNullable, () => __ΩBodyParserOptions, "customErrorHandler", 'errorHandler', 'app', 'request', 'response', 'sendRequest', '', 'onBodyParserFinished', 'error', 'defaultHandleOnError', 'b!Pe"!o""2#<9!2$<9n%2&8<9"0\'n).*fo("3+9<Pe"!2,!2-!2.$0/Pe"!2,!2-!2.P$/001<P!2-!2.!22$03<5e!!6"'];
//# sourceMappingURL=base-body-parser.framework.js.map