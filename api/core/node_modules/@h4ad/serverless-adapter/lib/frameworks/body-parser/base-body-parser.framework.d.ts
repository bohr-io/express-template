/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import type { NextHandleFunction } from 'connect';
import type { HttpError } from 'http-errors';
import { FrameworkContract } from '../../contracts';
/**
 * The options for {@link BaseBodyParserFramework}
 *
 * @breadcrumb Frameworks / BodyParserFramework
 * @public
 */
export declare type BodyParserOptions = {
    /**
     * Implements a custom way of handling error.
     *
     * @defaultValue {@link BaseBodyParserFramework.defaultHandleOnError}
     *
     * @example
     * ```typescript
     * customErrorHandler: (req: IncomingMessage, response: ServerResponse, error: HttpError<any>) => {
     *   response.setHeader('content-type', 'text/plain');
     *   response.statusCode = error.statusCode;
     *   // always call end to return the error
     *   response.end(error.message);
     * }
     * ```
     *
     * @param request - The referecene for request
     * @param response - The reference for response
     * @param error - The error throwed by body-parser
     */
    customErrorHandler?: (request: IncomingMessage, response: ServerResponse, error: HttpError<any>) => void;
};
/**
 * The base class used by other body-parser functions to parse a specific content-type
 *
 * @breadcrumb Frameworks / BodyParserFramework
 * @public
 */
export declare class BaseBodyParserFramework<TApp> implements FrameworkContract<TApp> {
    protected readonly framework: FrameworkContract<TApp>;
    protected readonly middleware: NextHandleFunction;
    protected readonly options?: BodyParserOptions | undefined;
    /**
     * Default Constructor
     */
    protected constructor(framework: FrameworkContract<TApp>, middleware: NextHandleFunction, options?: BodyParserOptions | undefined);
    /**
     * The selected error handler
     */
    protected readonly errorHandler: NonNullable<BodyParserOptions['customErrorHandler']>;
    /**
     * {@inheritDoc}
     */
    sendRequest(app: TApp, request: IncomingMessage, response: ServerResponse): void;
    /**
     * Handle next execution called by the cors package
     */
    protected onBodyParserFinished(app: TApp, request: IncomingMessage, response: ServerResponse): () => void;
    /**
     * The default function to handle errors
     *
     * @param request - The referecene for request
     * @param response - The reference for response
     * @param error - The error throwed by body-parser
     */
    protected defaultHandleOnError(request: IncomingMessage, response: ServerResponse, error: HttpError<any>): void;
}
export declare type __Î©BodyParserOptions = any[];
