"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloServerFramework = exports.__ΩApolloServerOptions = exports.__ΩApolloServerContextArguments = exports.__ΩDefaultServerlessApolloServerContext = void 0;
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const server_1 = require("@apollo/server");
const network_1 = require("../../network");
const core_1 = require("../../core");
const __ΩDefaultServerlessApolloServerContext = ['request', 'response', 'P"!4!!4"M'];
exports.__ΩDefaultServerlessApolloServerContext = __ΩDefaultServerlessApolloServerContext;
const __ΩApolloServerContextArguments = ['request', 'response', 'P!4!!4"M'];
exports.__ΩApolloServerContextArguments = __ΩApolloServerContextArguments;
const __ΩApolloServerOptions = ['TContext', () => __ΩApolloServerContextArguments, 'options', '', 'context', 'b!PPn"2#e#!`/$4%8M'];
exports.__ΩApolloServerOptions = __ΩApolloServerOptions;
/**
 * The framework that forwards requests to Apollo Server
 *
 * @breadcrumb Frameworks / ApolloServerFramework
 * @public
 */
class ApolloServerFramework {
    //#region Constructor
    /**
     * Construtor padrão
     */
    constructor(options) {
        this.options = options;
    }
    //#endregion
    /**
     * {@inheritDoc}
     */
    sendRequest(app, request, response) {
        var _a, _b, _c;
        const headers = new server_1.HeaderMap();
        for (const [key, value] of Object.entries(request.headers)) {
            if (value === undefined)
                continue;
            headers.set(key, Array.isArray(value) ? value.join(', ') : value.toString());
        }
        const defaultContext = __assignType(context => Promise.resolve(context), ['context', '', 'P"2!"/"']);
        const context = () => {
            var _a;
            return (0, core_1.getDefaultIfUndefined)((_a = this.options) === null || _a === void 0 ? void 0 : _a.context, defaultContext)({ request, response });
        };
        const search = ((_a = request.url) === null || _a === void 0 ? void 0 : _a.startsWith('http'))
            ? (_b = new URL(request.url).search) !== null && _b !== void 0 ? _b : ''
            : ((_c = request.url) === null || _c === void 0 ? void 0 : _c.split('?')[1]) || '';
        // we don't need to handle catch because of https://www.apollographql.com/docs/apollo-server/integrations/building-integrations/#handle-errors
        app
            .executeHTTPGraphQLRequest({
            httpGraphQLRequest: {
                method: request.method.toUpperCase(),
                headers,
                body: request.body,
                search,
            },
            context,
        })
            .then(__assignType(async (httpGraphQLResponse) => {
            // this section was copy and pasted from https://github.com/apollographql/apollo-server/blob/main/packages/server/src/express4/index.ts#L95
            for (const [key, value] of httpGraphQLResponse.headers)
                response.setHeader(key, value);
            response.statusCode = httpGraphQLResponse.status || 200;
            if (httpGraphQLResponse.body.kind === 'complete') {
                response.end(httpGraphQLResponse.body.string);
                return;
            }
            for await (const chunk of httpGraphQLResponse.body.asyncIterator) {
                response.write(chunk);
                // Express/Node doesn't define a way of saying "it's time to send this
                // data over the wire"... but the popular `compression` middleware
                // (which implements `accept-encoding: gzip` and friends) does, by
                // monkey-patching a `flush` method onto the response. So we call it
                // if it's there.
                if (typeof response.flush === 'function')
                    response.flush();
            }
            response.end();
        }, ['httpGraphQLResponse', '', 'P"2!"/"']));
    }
}
exports.ApolloServerFramework = ApolloServerFramework;
ApolloServerFramework.__type = ['TContext', () => __ΩApolloServerOptions, 'options', 'constructor', () => server_1.ApolloServer, 'app', () => network_1.ServerlessRequest, 'request', 'response', 'sendRequest', () => server_1.ApolloServer, 'b!Pe"!o""2#8<9"0$PPe#!7%2&P7\'2(!2)$0*5Pe"!7+6"'];
//# sourceMappingURL=apollo-server.framework.js.map