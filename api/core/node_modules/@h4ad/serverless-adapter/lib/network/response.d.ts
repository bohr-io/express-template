/// <reference types="node" />
/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
declare const BODY: unique symbol;
declare const HEADERS: unique symbol;
/**
 * The properties to create a {@link ServerlessResponse}.
 *
 * @breadcrumb Network / ServerlessResponse
 * @public
 */
export interface ServerlessResponseProps {
    /**
     * The HTTP Method from request
     */
    method?: string;
}
/**
 * The class that represents a response instance used to send to the framework and wait until the framework finishes processing the request.
 * Once it's happens, we use the properties from this response to built the response to the cloud.
 *
 * @breadcrumb Network / ServerlessResponse
 * @public
 */
export declare class ServerlessResponse extends ServerResponse {
    constructor({ method }: ServerlessResponseProps);
    _header: string;
    _headers?: Record<any, any>;
    _wroteHeader?: boolean;
    [BODY]: any[];
    [HEADERS]: Record<any, any>;
    get headers(): Record<any, any>;
    static from(res: IncomingMessage): ServerlessResponse;
    static body(res: ServerlessResponse): Buffer;
    static headers(res: ServerlessResponse): import("http").OutgoingHttpHeaders & Record<any, any>;
    setHeader(key: string, value: number | string | readonly string[]): any;
    writeHead(statusCode: number, statusMessage?: string | any | any[], obj?: any | any[]): any;
    /**
     * I use ignore here because in nodejs 12.x, statusMessage can be string | OutgoingHttpHeaders
     * But in nodejs \>=14.x, statusMessage can also be OutgoingHttpHeaders[]
     * I take care of these cases above, but here I can't handle it well, so I give up
     * nodejs 12.x ref: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/v12/http.d.ts#L229
     * nodejs 14.x ref: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/v14/http.d.ts#L263
     */
    protected callNativeWriteHead(statusCode: number, statusMessage?: string | any | any[], obj?: any | any[]): this;
}
export {};
export declare type __Î©ServerlessResponseProps = any[];
