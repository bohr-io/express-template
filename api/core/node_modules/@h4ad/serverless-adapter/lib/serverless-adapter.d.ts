import { BinarySettings } from './@types';
import { AdapterContract, FrameworkContract, HandlerContract, ResolverContract, ServerlessHandler } from './contracts';
import { ILogger } from './core';
/**
 * The class used to build the serverless handler.
 *
 * @example
 * ```typescript
 * const app = express();
 * export const handler = ServerlessAdapter.new(app)
 *   .setFramework(new ExpressFramework())
 *   .setHandler(new DefaultHandler())
 *   .setResolver(new PromiseResolver())
 *   .setRespondWithErrors(true)
 *   .addAdapter(new AlbAdapter())
 *   .addAdapter(new SQSAdapter())
 *   .addAdapter(new SNSAdapter())
 *   .build();
 * ```
 *
 * @breadcrumb ServerlessAdapter
 * @public
 */
export declare class ServerlessAdapter<TApp, TEvent, TContext, TCallback, TResponse, TReturn> {
    /**
     * Default constructor
     */
    private constructor();
    /**
     * The instance of the app (express, hapi, koa, etc...)
     */
    protected app: TApp;
    /**
     * Settings for whether the response should be treated as binary or not
     *
     * @defaultValue `contentEncodings` and `contentTypes` are set with {@link DEFAULT_BINARY_ENCODINGS} and {@link DEFAULT_BINARY_CONTENT_TYPES}, respectively.
     */
    protected binarySettings: BinarySettings;
    /**
     * Indicates whether the error stack should be included in the response or not
     *
     * @remarks These errors will only be included when an error occurs while forwarding the event to the framework
     * @defaultValue True when NODE_ENV is equal to `development`
     */
    protected respondWithErrors: boolean;
    /**
     * The instance of the logger service
     */
    protected log: ILogger;
    /**
     * The list of adapters used to handle an event's request and response
     */
    protected adapters: AdapterContract<TEvent, TContext, TResponse>[];
    /**
     * The framework that will process requests
     */
    protected framework?: FrameworkContract<TApp>;
    /**
     * The resolver that aims to resolve the response to serverless and stop its execution when the request ends
     */
    protected resolver?: ResolverContract<TEvent, TContext, TCallback, TResponse, TReturn>;
    /**
     * The handler that will get the event, context and callback and pass it to the adapter and framework
     */
    protected handler?: HandlerContract<TApp, TEvent, TContext, TCallback, TResponse, TReturn>;
    /**
     * Creates a new instance of the builder with app (express, hapi, koa, etc...)
     *
     * @param app - The instance of the app
     */
    static new<TApp, TEvent, TContext = any, TCallback = any, TResponse = any, TReturn = any>(app: TApp): ServerlessAdapter<TApp, TEvent, TContext, TCallback, TResponse, TReturn>;
    /**
     * Defines the handler that will get the event, context and callback and pass it to the adapter and framework
     *
     * @param handler - The implementation of the handler contract
     */
    setHandler(handler: HandlerContract<TApp, TEvent, TContext, TCallback, TResponse, TReturn>): Omit<this, 'setHandler'>;
    /**
     * Defines the resolver that aims to resolve the response to serverless and stop its execution when the request ends
     *
     * @param resolver - The implementation of the resolver contract
     */
    setResolver(resolver: ResolverContract<TEvent, TContext, TCallback, TResponse, TReturn>): Omit<this, 'setResolver'>;
    /**
     * Defines the framework that will process requests
     *
     * @param framework - The implementation of the framework contract
     */
    setFramework(framework: FrameworkContract<TApp>): Omit<this, 'setFramework'>;
    /**
     * Defines the logger service used during the execution of the handler
     *
     * @param logger - The implementation of the logger
     */
    setLogger(logger: ILogger): Omit<this, 'setLogger'>;
    /**
     * Defines the binary settings for whether the response should be treated as binary or not
     *
     * @param binarySettings - The binary settings
     */
    setBinarySettings(binarySettings: BinarySettings): Omit<this, 'setBinarySettings'>;
    /**
     * Defines the responseWithErrors, a property that indicates whether the error stack should be included in the response or not
     *
     * @param respondWithErrors - Should include or not the errors in response
     */
    setRespondWithErrors(respondWithErrors: boolean): Omit<this, 'setRespondWithErrors'>;
    /**
     * Add an adapter to the adapters list to handle the event coming from any serverless event source
     *
     * @param adapter - The implementation of the adapter contract
     */
    addAdapter(adapter: AdapterContract<TEvent, TContext, TResponse>): Pick<this, 'addAdapter' | 'build'>;
    /**
     * The builder method that returns the handler function to be exported for serverless consumption
     */
    build(): ServerlessHandler<TReturn>;
}
