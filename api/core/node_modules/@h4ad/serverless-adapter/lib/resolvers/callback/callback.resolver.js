"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbackResolver = exports.__ΩServerlessCallback = void 0;
const { __ΩResolverProps } = require('../../contracts');
const { __ΩResolver } = require('../../contracts');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const __ΩError = ['name', 'message', 'stack', 'P&4!&4"&4#8M'];
const __ΩServerlessCallback = ['TResponse', () => __ΩError, 'error', 'success', '', 'b!PPn",J2#Pe#!,J2$$/%'];
exports.__ΩServerlessCallback = __ΩServerlessCallback;
/**
 * The class that implements the resolver using the callback function sent by serverless
 *
 * @remarks To use this resolver on AWS, you MUST leave `{@link https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html | callbackWaitsForEmptyEventLoop}` as true, otherwise, AWS will not wait for this resolver to resolve.
 *
 * @breadcrumb Resolvers / CallbackResolver
 * @public
 */
class CallbackResolver {
    /**
     * {@inheritDoc}
     */
    createResolver({ callback, event, log, respondWithErrors, adapter, }) {
        if (!callback) {
            throw new Error('Could not figure out how to create the resolver because the "callback" argument was not sent.');
        }
        const delegatedResolver = {
            succeed: __assignType(response => callback(null, response), ['response', '', 'P"2!"/"']),
            fail: __assignType(error => callback(error, null), ['error', '', 'P"2!"/"']),
        };
        return {
            run: __assignType(task => {
                task()
                    .then(__assignType(response => delegatedResolver.succeed(response), ['response', '', 'P"2!"/"']))
                    .catch(__assignType(error => {
                    log.error('SERVERLESS_ADAPTER:RESPOND_TO_EVENT_SOURCE_WITH_ERROR', error);
                    adapter.onErrorWhileForwarding({
                        delegatedResolver,
                        error,
                        log,
                        event,
                        respondWithErrors,
                    });
                }, ['error', '', 'P"2!"/"']));
            }, ['task', '', 'P"2!"/"']),
        };
    }
}
exports.CallbackResolver = CallbackResolver;
CallbackResolver.__type = ['TEvent', 'TContext', 'TResponse', () => __ΩResolverProps, () => __ΩServerlessCallback, 'param0', () => __ΩResolver, 'createResolver', () => __ΩServerlessCallback, 'b!b"b#Pe"!e"""o%"e"#o$%2&"$o\'#0(5e!!e!""o)"e!#$6&'];
//# sourceMappingURL=callback.resolver.js.map