"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseResolver = void 0;
const { __立ResolverProps } = require('../../contracts');
const { __立Resolver } = require('../../contracts');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
//#endregion
/**
 * The class that implements the resolver using the promise object sent by this library
 *
 * @breadcrumb Resolvers / PromiseResolver
 * @public
 */
class PromiseResolver {
    /**
     * {@inheritDoc}
     */
    createResolver({ event, log, respondWithErrors, adapter, }) {
        return {
            run: __assignType(task => {
                return new Promise(__assignType((resolve, reject) => {
                    const delegatedResolver = {
                        succeed: __assignType(response => resolve(response), ['response', '', 'P"2!"/"']),
                        fail: __assignType(error => reject(error), ['error', '', 'P"2!"/"']),
                    };
                    task()
                        .then(__assignType(response => delegatedResolver.succeed(response), ['response', '', 'P"2!"/"']))
                        .catch(__assignType(error => {
                        log.error('SERVERLESS_ADAPTER:RESPOND_TO_EVENT_SOURCE_WITH_ERROR', error);
                        adapter.onErrorWhileForwarding({
                            delegatedResolver,
                            error,
                            log,
                            event,
                            respondWithErrors,
                        });
                    }, ['error', '', 'P"2!"/"']));
                }, ['resolve', 'reject', '', 'P"2!"2""/#']));
            }, ['task', '', 'P"2!"/"']),
        };
    }
}
exports.PromiseResolver = PromiseResolver;
PromiseResolver.__type = ['TEvent', 'TContext', 'TCallback', 'TResponse', 'TReturn', () => __立ResolverProps, 'param0', () => __立Resolver, 'createResolver', 'b!b"b#b$b%Pe"!e""e"#e"$o&%2\'e"$e"%`o(#0)5e!!e!"e!#e!$"`6&'];
//# sourceMappingURL=promise.resolver.js.map