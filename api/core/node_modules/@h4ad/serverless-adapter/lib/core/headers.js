"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMultiValueHeadersMap = exports.getFlattenedHeadersMap = void 0;
const { __ΩBothValueHeaders } = require('../@types');
const __ΩRecord = ['K', 'T', 'l\'e#"Rb!b"Pde"!N#!'];
//#endregion
/**
 * Transform a header map and make sure the value is not an array
 *
 * @example
 * ```typescript
 * const headers = { 'accept-encoding': 'gzip', 'accept-language': ['en-US', 'en;q=0.9'] };
 * const flattenedHeaders = getFlattenedHeadersMap(headers, ',', true);
 * console.log(flattenedHeaders);
 * // { 'accept-encoding': 'gzip', 'accept-language': 'en-US,en;q=0.9' }
 * ```
 *
 * @param headersMap - The initial headers
 * @param separator - The separator used when we join the array of header's value
 * @param lowerCaseKey - Should put all keys in lowercase
 *
 * @breadcrumb Core / Headers
 * @public
 */
function getFlattenedHeadersMap(headersMap, separator = ',', lowerCaseKey = false) {
    const commaDelimitedHeaders = {};
    const headersMapEntries = Object.entries(headersMap);
    for (const [headerKey, headerValue] of headersMapEntries) {
        const newKey = lowerCaseKey ? headerKey.toLowerCase() : headerKey;
        if (Array.isArray(headerValue))
            commaDelimitedHeaders[newKey] = headerValue.join(separator);
        else
            commaDelimitedHeaders[newKey] = String(headerValue !== null && headerValue !== void 0 ? headerValue : '');
    }
    return commaDelimitedHeaders;
}
exports.getFlattenedHeadersMap = getFlattenedHeadersMap;
getFlattenedHeadersMap.__type = [() => __ΩBothValueHeaders, 'headersMap', 'separator', () => ",", 'lowerCaseKey', () => false, () => __ΩRecord, 'getFlattenedHeadersMap', 'Pn!2"&2#>$)2%>&&&o\'#/('];
/**
 * Transforms a header map into a multi-value map header.
 *
 * @example
 * ```typescript
 * const headers = { 'accept-encoding': 'gzip', 'connection': ['keep-alive'] };
 * const multiValueHeaders = getMultiValueHeadersMap(headers);
 * console.log(multiValueHeaders);
 * // { 'accept-encoding': ['gzip'], 'connection': ['keep-alive'] }
 * ```
 *
 * @param headersMap - The initial headers
 *
 * @breadcrumb Core / Headers
 * @public
 */
function getMultiValueHeadersMap(headersMap) {
    const multiValueHeaders = {};
    const headersMapEntries = Object.entries(headersMap);
    for (const [headerKey, headerValue] of headersMapEntries) {
        multiValueHeaders[headerKey.toLowerCase()] = Array.isArray(headerValue)
            ? headerValue.map(String)
            : [String(headerValue)];
    }
    return multiValueHeaders;
}
exports.getMultiValueHeadersMap = getMultiValueHeadersMap;
getMultiValueHeadersMap.__type = [() => __ΩBothValueHeaders, 'headersMap', () => __ΩRecord, 'getMultiValueHeadersMap', 'Pn!2"&&Fo##/$'];
//# sourceMappingURL=headers.js.map