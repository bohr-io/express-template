"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQueryParamsStringFromRecord = exports.getPathWithQueryStringParams = void 0;
const __ΩRecord = ['K', 'T', 'l\'e#"Rb!b"Pde"!N#!'];
/**
 * Transform the path and a map of query params to a string with formatted query params
 *
 * @example
 * ```typescript
 * const path = '/pets/search';
 * const queryParams = { batata: undefined, petType: [ 'dog', 'fish' ] };
 * const result = getPathWithQueryStringParams(path, queryParams);
 * console.log(result);
 * // /pets/search?batata=&petType=dog&petType=fish
 * ```
 *
 * @param path - The path
 * @param queryParams - The query params
 *
 * @breadcrumb Core / Path
 * @public
 */
function getPathWithQueryStringParams(path, queryParams) {
    if (String(queryParams || '').length === 0)
        return path;
    if (typeof queryParams === 'string')
        return `${path}?${queryParams}`;
    const queryParamsString = getQueryParamsStringFromRecord(queryParams);
    if (!queryParamsString)
        return path;
    return `${path}?${queryParamsString}`;
}
exports.getPathWithQueryStringParams = getPathWithQueryStringParams;
getPathWithQueryStringParams.__type = ['path', () => __ΩRecord, 'queryParams', 'getPathWithQueryStringParams', 'P&2!P&&P&&F-Jo"#-,J2#&/$'];
/**
 * Map query params to a string with formatted query params
 *
 * @example
 * ```typescript
 * const queryParams = { batata: undefined, petType: [ 'dog', 'fish' ] };
 * const result = getQueryParamsStringFromRecord(queryParams);
 * console.log(result);
 * // batata=&petType=dog&petType=fish
 * ```
 *
 * @param queryParamsRecord - The query params record
 *
 * @breadcrumb Core / Path
 * @public
 */
function getQueryParamsStringFromRecord(queryParamsRecord) {
    const searchParams = new URLSearchParams();
    const multiValueHeadersEntries = Object.entries(queryParamsRecord || {});
    if (multiValueHeadersEntries.length === 0)
        return '';
    for (const [key, value] of multiValueHeadersEntries) {
        if (!Array.isArray(value)) {
            searchParams.append(key, value || '');
            continue;
        }
        for (const arrayValue of value)
            searchParams.append(key, arrayValue);
    }
    return searchParams.toString();
}
exports.getQueryParamsStringFromRecord = getQueryParamsStringFromRecord;
getQueryParamsStringFromRecord.__type = [() => __ΩRecord, 'queryParamsRecord', 'getQueryParamsStringFromRecord', 'PP&P&&F-Jo!#-,J2"&/#'];
//# sourceMappingURL=path.js.map