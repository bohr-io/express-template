"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBinary = exports.isContentTypeBinary = exports.getContentType = exports.isContentEncodingBinary = void 0;
const { __ΩBothValueHeaders } = require('../@types');
const { __ΩBinarySettings } = require('../@types');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const headers_1 = require("./headers");
//#endregion
/**
 * The function that determines by the content encoding whether the response should be treated as binary
 *
 * @example
 * ```typescript
 * const headers = { 'Content-Encoding': 'gzip' };
 * const isBinary = isContentEncodingBinary(headers, ['gzip']);
 * console.log(isBinary);
 * // true
 * ```
 *
 * @param headers - The headers of the response
 * @param binaryEncodingTypes - The list of content encodings that will be treated as binary
 *
 * @breadcrumb Core / isBinary
 * @public
 */
function isContentEncodingBinary(headers, binaryEncodingTypes) {
    const multiValueHeaders = (0, headers_1.getMultiValueHeadersMap)(headers);
    const contentEncodings = multiValueHeaders['content-encoding'];
    if (!Array.isArray(contentEncodings))
        return false;
    return contentEncodings.some(__assignType(value => binaryEncodingTypes.some(__assignType(binaryEncoding => value.includes(binaryEncoding), ['binaryEncoding', '', 'P"2!"/"'])), ['value', '', 'P"2!"/"']));
}
exports.isContentEncodingBinary = isContentEncodingBinary;
isContentEncodingBinary.__type = [() => __ΩBothValueHeaders, 'headers', 'binaryEncodingTypes', 'isContentEncodingBinary', 'Pn!2"&F2#)/$'];
/**
 * The function that returns the content type of headers
 *
 * @example
 * ```typescript
 * const headers = { 'Content-Type': 'application/json' };
 * const contentType = getContentType(headers);
 * console.log(contentType);
 * // application/json
 * ```
 *
 * @param headers - The headers of the response
 *
 * @breadcrumb Core / isBinary
 * @public
 */
function getContentType(headers) {
    const flattenedHeaders = (0, headers_1.getFlattenedHeadersMap)(headers, ';', true);
    const contentTypeHeader = flattenedHeaders['content-type'] || '';
    // only compare mime type; ignore encoding part
    return contentTypeHeader.split(';')[0];
}
exports.getContentType = getContentType;
getContentType.__type = [() => __ΩBothValueHeaders, 'headers', 'getContentType', 'Pn!2"&/#'];
/**
 * The function that determines by the content type whether the response should be treated as binary
 *
 * @example
 * ```typescript
 * const headers = { 'Content-Type': 'image/png' };
 * const isBinary = isContentTypeBinary(headers, [new RegExp('^image/.*$')]);
 * console.log(isBinary);
 * // true
 * ```
 *
 * @param headers - The headers of the response
 * @param binaryContentTypes - The list of content types that will be treated as binary
 *
 * @breadcrumb Core / isBinary
 * @public
 */
function isContentTypeBinary(headers, binaryContentTypes) {
    const binaryContentTypesRegexes = binaryContentTypes.map(__assignType(binaryContentType => binaryContentType instanceof RegExp
        ? binaryContentType
        : new RegExp(`${binaryContentType}`), ['binaryContentType', '', 'P"2!"/"']));
    const contentType = getContentType(headers);
    if (!contentType)
        return false;
    return binaryContentTypesRegexes.some(__assignType(binaryContentType => binaryContentType.test(contentType), ['binaryContentType', '', 'P"2!"/"']));
}
exports.isContentTypeBinary = isContentTypeBinary;
isContentTypeBinary.__type = [() => __ΩBothValueHeaders, 'headers', 'binaryContentTypes', 'isContentTypeBinary', 'Pn!2"P&AJF2#"/$'];
/**
 * The function used to determine from the headers and the binary settings if a response should be encoded or not
 *
 * @example
 * ```typescript
 * const headers = { 'Content-Type': 'image/png', 'Content-Encoding': 'gzip' };
 * const isContentBinary = isBinary(headers, { contentEncodings: ['gzip'], contentTypes: [new RegExp('^image/.*$')] });
 * console.log(isContentBinary);
 * // true
 * ```
 *
 * @param headers - The headers of the response
 * @param binarySettings - The settings for the validation
 *
 * @breadcrumb Core / isBinary
 * @public
 */
function isBinary(headers, binarySettings) {
    if ('isBinary' in binarySettings) {
        if (binarySettings.isBinary === false)
            return false;
        return binarySettings.isBinary(headers);
    }
    return (isContentEncodingBinary(headers, binarySettings.contentEncodings) ||
        isContentTypeBinary(headers, binarySettings.contentTypes));
}
exports.isBinary = isBinary;
isBinary.__type = [() => __ΩBothValueHeaders, 'headers', () => __ΩBinarySettings, 'binarySettings', 'isBinary', 'Pn!2"n#2$)/%'];
//# sourceMappingURL=is-binary.js.map