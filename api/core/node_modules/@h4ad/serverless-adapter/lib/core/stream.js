"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForStreamComplete = exports.isStreamEnded = void 0;
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
//#endregion
/**
 * Check if stream already ended
 *
 * @param stream - The stream
 *
 * @breadcrumb Core / Stream
 * @public
 */
function isStreamEnded(stream) {
    if ('readableEnded' in stream && stream.readableEnded)
        return true;
    if ('writableEnded' in stream && stream.writableEnded)
        return true;
    return false;
}
exports.isStreamEnded = isStreamEnded;
isStreamEnded.__type = ['stream', 'isStreamEnded', 'PP!!J2!)/"'];
/**
 * Wait asynchronous the stream to complete
 *
 * @param stream - The stream
 *
 * @breadcrumb Core / Stream
 * @public
 */
function waitForStreamComplete(stream) {
    if (isStreamEnded(stream))
        return Promise.resolve(stream);
    return new Promise(__assignType((resolve, reject) => {
        // Reading the {@link https://github.com/nodejs/node/blob/v12.22.9/lib/events.js#L262 | emit source code},
        // it's almost impossible to complete being called twice because the emit function runs synchronously and removes the other listeners,
        // but I'll leave it at that because I didn't write that code, so I couldn't figure out what the author thought when he wrote this.
        let isComplete = false;
        function complete(err) {
            /* istanbul ignore next */
            if (isComplete)
                return;
            isComplete = true;
            stream.removeListener('error', complete);
            stream.removeListener('end', complete);
            stream.removeListener('finish', complete);
            if (err)
                reject(err);
            else
                resolve(stream);
        }
        complete.__type = ['err', 'complete', 'P"2!"/"'];
        stream.once('error', complete);
        stream.once('end', complete);
        stream.once('finish', complete);
    }, ['resolve', 'reject', '', 'P"2!"2""/#']));
}
exports.waitForStreamComplete = waitForStreamComplete;
waitForStreamComplete.__type = ['stream', 'waitForStreamComplete', 'P"2!"`/"'];
//# sourceMappingURL=stream.js.map