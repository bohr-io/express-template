"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInternalLogger = exports.createDefaultLogger = exports.__ΩILogger = exports.__ΩLoggerFN = exports.__ΩLoggerOptions = exports.__ΩLogLevels = void 0;
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const __ΩRecord = ['K', 'T', 'l\'e#"Rb!b"Pde"!N#!'];
const __ΩExclude = ['T', 'U', 'l6!Re$!RPe#!e$"qk#%QRb!b"Pde"!p)'];
const __ΩLogLevels = ["debug", "verbose", "info", "warn", "error", "none", 'P.!.".#.$.%.&J'];
exports.__ΩLogLevels = __ΩLogLevels;
const __ΩLoggerOptions = [() => __ΩLogLevels, 'level', 'Pn!4"M'];
exports.__ΩLoggerOptions = __ΩLoggerOptions;
const __ΩLoggerFN = ['message', 'additional', '', 'P"2!"@2"$/#'];
exports.__ΩLoggerFN = __ΩLoggerFN;
const __ΩILogger = [() => __ΩRecord, () => __ΩExclude, () => __ΩLogLevels, "none", () => __ΩLoggerFN, 'n#.$o"#n%o!#'];
exports.__ΩILogger = __ΩILogger;
/**
 * The symbol used to check against an ILogger instace to verify if that ILogger was created by this library
 *
 * @breadcrumb Core / Logger
 * @public
 */
const InternalLoggerSymbol = Symbol('InternalLogger');
const errorLogLevel = new Map([
    ['debug', true],
    ['verbose', true],
    ['info', true],
    ['warn', true],
    ['error', true],
]);
const warnLogLevel = new Map([
    ['debug', true],
    ['verbose', true],
    ['info', true],
    ['warn', true],
]);
const infoLogLevel = new Map([
    ['debug', true],
    ['verbose', true],
    ['info', true],
]);
const verboseLogLevel = new Map([
    ['debug', true],
    ['verbose', true],
]);
const lazyPrint = __assignType(value => {
    if (typeof value === 'function')
        return value();
    return value;
}, ['value', '', 'P"2!"/"']);
/**
 * The method used to create a simple logger instance to use in this library.
 *
 * @remarks Behind the scenes, this simple logger sends the message to the `console` methods.
 *
 * @example
 * ```typescript
 * const logger = createDefaultLogger();
 *
 * logger.error('An error happens.');
 * // An error happens.
 * ```
 *
 * @param level - Select the level of the log
 *
 * @breadcrumb Core / Logger
 * @public
 */
function createDefaultLogger({ level } = { level: 'error' }) {
    return {
        [InternalLoggerSymbol]: true,
        error: __assignType((message, ...additional) => {
            if (!errorLogLevel.has(level))
                return;
            console.error(message, ...additional.map(lazyPrint));
        }, ['message', 'additional', '', 'P"2!"@2""/#']),
        warn: __assignType((message, ...additional) => {
            if (!warnLogLevel.has(level))
                return;
            console.warn(message, ...additional.map(lazyPrint));
        }, ['message', 'additional', '', 'P"2!"@2""/#']),
        info: __assignType((message, ...additional) => {
            if (!infoLogLevel.has(level))
                return;
            console.info(message, ...additional.map(lazyPrint));
        }, ['message', 'additional', '', 'P"2!"@2""/#']),
        verbose: __assignType((message, ...additional) => {
            if (!verboseLogLevel.has(level))
                return;
            console.debug(message, ...additional.map(lazyPrint));
        }, ['message', 'additional', '', 'P"2!"@2""/#']),
        debug: __assignType((message, ...additional) => {
            if (level !== 'debug')
                return;
            console.debug(message, ...additional.map(lazyPrint));
        }, ['message', 'additional', '', 'P"2!"@2""/#']),
    };
}
exports.createDefaultLogger = createDefaultLogger;
createDefaultLogger.__type = [() => __ΩLoggerOptions, 'param0', () => ({ level: "error" }), () => __ΩILogger, 'createDefaultLogger', 'Pn!2">#n$/%'];
/**
 * The method used to chck if logger was created by this library, or it was defined by the user.
 *
 * @param logger - The instance of the logger to check
 *
 * @breadcrumb Core / Logger
 * @public
 */
function isInternalLogger(logger) {
    return !!logger[InternalLoggerSymbol];
}
exports.isInternalLogger = isInternalLogger;
isInternalLogger.__type = [() => __ΩILogger, 'logger', 'isInternalLogger', 'Pn!2")/#'];
//# sourceMappingURL=logger.js.map