"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RawRequest = void 0;
const { __ΩFrameworkContract } = require('../../contracts/index');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const index_1 = require("../../network/index");
const index_2 = require("../../core/index");
//#endregion
/**
 * The class that expose some methods to be used to get raw request from Express HTTP Request
 *
 * @breadcrumb Handlers / Base / RawRequest
 * @public
 */
class RawRequest {
    //#region Protected Methods
    /**
     * The callback to when receive some request from external source
     *
     * @param app - The instance of the app
     * @param framework - The framework for the app
     */
    onRequestCallback(app, framework) {
        return __assignType((request, response) => {
            const customRequest = this.getRequestFromExpressRequest(request);
            return framework.sendRequest(app, customRequest, response);
        }, ['request', 'response', '', 'P!2!!2""/#']);
    }
    /**
     * Not sure why they think using Express instance with prebuilt middlewares was a good idea, but Firebase/GCP
     * decides to use `Express` and `body-parser` by default, so you don't get a raw request, instead, you get a modified version by
     * Express and also with the body parsed by `body-parser`.
     * If you use NestJS or Express it's awesome, but for the rest of the frameworks it's terrible!
     * That's why I have this method, just to try and create a raw request to be used and passed to the frameworks so they can handle the request
     * as if they received the request from the native http module.
     *
     * @param request - The Express request
     */
    getRequestFromExpressRequest(request) {
        const expressRequestParsed = request;
        const headers = (0, index_2.getFlattenedHeadersMap)(request.headers, ',', true);
        const remoteAddress = headers['x-forwarded-for'];
        let body;
        if (expressRequestParsed.body &&
            typeof expressRequestParsed.body === 'object') {
            const jsonContent = JSON.stringify(expressRequestParsed.body);
            const [bufferBody, contentLength] = (0, index_2.getEventBodyAsBuffer)(jsonContent, false);
            body = bufferBody;
            headers['content-length'] = String(contentLength);
        }
        return new index_1.ServerlessRequest({
            method: request.method,
            url: request.url,
            body,
            headers,
            remoteAddress,
        });
    }
}
exports.RawRequest = RawRequest;
RawRequest.__type = ['TApp', 'app', () => __ΩFrameworkContract, 'framework', 'req', 'res', '', 'onRequestCallback', 'request', () => index_1.ServerlessRequest, 'getRequestFromExpressRequest', 'b!Pe"!2"e"!o#"2$P!2%!2&P$$`J/\'0(<P!2)P7*0+<5'];
//# sourceMappingURL=raw-request.js.map