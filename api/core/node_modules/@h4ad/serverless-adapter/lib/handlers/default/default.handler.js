"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultHandler = void 0;
const { __ΩFrameworkContract } = require('../../contracts');
const { __ΩAdapterContract } = require('../../contracts');
const { __ΩResolverContract } = require('../../contracts');
const { __ΩBinarySettings } = require('../../@types');
const { __ΩILogger } = require('../../core');
const { __ΩServerlessHandler } = require('../../contracts');
const { __ΩAdapterRequest } = require('../../contracts');
const { __ΩSingleValueHeaders } = require('../../@types');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
//#region Imports
const util_1 = __importDefault(require("util"));
const core_1 = require("../../core");
const network_1 = require("../../network");
//#endregion
/**
 * The class that implements a default serverless handler consisting of a function with event, context and callback parameters respectively
 *
 * @breadcrumb Handlers / DefaultHandler
 * @public
 */
class DefaultHandler extends core_1.BaseHandler {
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    getHandler(app, framework, adapters, resolverFactory, binarySettings, respondWithErrors, log) {
        return __assignType((event, context, callback) => {
            this.onReceiveRequest(log, event, context, binarySettings, respondWithErrors);
            const adapter = this.getAdapterByEventAndContext(event, context, adapters, log);
            this.onResolveAdapter(log, adapter);
            (0, core_1.setCurrentInvoke)({ event, context });
            const resolver = resolverFactory.createResolver({
                event,
                context,
                callback,
                log,
                respondWithErrors,
                adapter,
            });
            return resolver.run(() => this.forwardRequestToFramework(app, framework, event, context, adapter, binarySettings, log));
        }, ['event', 'context', 'callback', '', 'P!2!!2"!2#8"/$']);
    }
    //#endregion
    //#region Hooks
    /**
     * The hook executed on receive a request, before the request is being processed
     *
     * @param log - The instance of logger
     * @param event - The event sent by serverless
     * @param context - The context sent by serverless
     * @param binarySettings - The binary settings
     * @param respondWithErrors - Indicates whether the error stack should be included in the response or not
     */
    onReceiveRequest(log, event, context, binarySettings, respondWithErrors) {
        log.debug('SERVERLESS_ADAPTER:PROXY', () => ({
            event: util_1.default.inspect(event, { depth: null }),
            context: util_1.default.inspect(context, { depth: null }),
            binarySettings,
            respondWithErrors,
        }));
    }
    /**
     * The hook executed after resolve the adapter that will be used to handle the request and response
     *
     * @param log - The instance of logger
     * @param adapter - The adapter resolved
     */
    onResolveAdapter(log, adapter) {
        log.debug('SERVERLESS_ADAPTER:RESOLVED_ADAPTER_NAME: ', adapter.getAdapterName());
    }
    /**
     * The hook executed after resolves the request values that will be sent to the framework
     *
     * @param log - The instance of logger
     * @param requestValues - The request values returned by the adapter
     */
    onResolveRequestValues(log, requestValues) {
        var _a;
        const body = (_a = requestValues.body) === null || _a === void 0 ? void 0 : _a.toString();
        log.debug('SERVERLESS_ADAPTER:FORWARD_REQUEST_TO_FRAMEWORK:REQUEST_VALUES', {
            requestValues: {
                ...requestValues,
                body,
            },
        });
    }
    /**
     * The hook executed after handling the response sent by the framework
     *
     * @param log - The instance of logger
     * @param response - The response sent by the framework
     */
    onResolveForwardedResponseToFramework(log, response) {
        log.debug('SERVERLESS_ADAPTER:FORWARD_REQUEST_TO_FRAMEWORK:RESPONSE', {
            response,
        });
    }
    /**
     * The hook executed before sending response to the serverless
     *
     * @param log - The instance of logger
     * @param statusCode - The status code of the response
     * @param body - The body of the response
     * @param headers - The headers of the response
     * @param isBase64Encoded - Indicates whether the response was encoded as binary or not
     */
    onForwardResponse(log, statusCode, body, headers, isBase64Encoded) {
        log.debug('SERVERLESS_ADAPTER:FORWARD_RESPONSE:EVENT_SOURCE_RESPONSE_PARAMS', {
            statusCode,
            body,
            headers,
            isBase64Encoded,
        });
    }
    /**
     * The hook executed before sending response to the serverless with response from adapter
     *
     * @param log - The instance of logger
     * @param successResponse - The success response resolved by the adapter
     * @param body - The body of the response sent by the framework
     */
    onForwardResponseAdapterResponse(log, successResponse, body) {
        log.debug('SERVERLESS_ADAPTER:FORWARD_RESPONSE:EVENT_SOURCE_RESPONSE', () => ({
            successResponse: util_1.default.inspect(successResponse, { depth: null }),
            body,
        }));
    }
    //#endregion
    //#region Protected Methods
    /**
     * The function to forward the event to the framework
     *
     * @param app - The instance of the app (express, hapi, etc...)
     * @param framework - The framework that will process requests
     * @param event - The event sent by serverless
     * @param context - The context sent by serverless
     * @param adapter - The adapter resolved to this event
     * @param log - The instance of logger
     * @param binarySettings - The binary settings
     */
    async forwardRequestToFramework(app, framework, event, context, adapter, binarySettings, log) {
        const requestValues = adapter.getRequest(event, context, log);
        this.onResolveRequestValues(log, requestValues);
        const [request, response] = this.getServerlessRequestResponseFromAdapterRequest(requestValues);
        framework.sendRequest(app, request, response);
        await (0, core_1.waitForStreamComplete)(response);
        this.onResolveForwardedResponseToFramework(log, response);
        return this.forwardResponse(event, response, adapter, binarySettings, log);
    }
    /**
     * The function to forward the response back to the serverless
     *
     * @param event - The event sent by serverless
     * @param response - The response of the framework
     * @param adapter - The adapter resolved to this event
     * @param binarySettings - The binary settings
     * @param log - The instance of logger
     */
    forwardResponse(event, response, adapter, binarySettings, log) {
        const statusCode = response.statusCode;
        const headers = network_1.ServerlessResponse.headers(response);
        const isBase64Encoded = (0, core_1.isBinary)(headers, binarySettings);
        const encoding = isBase64Encoded ? 'base64' : 'utf8';
        const body = network_1.ServerlessResponse.body(response).toString(encoding);
        const logBody = isBase64Encoded ? '[BASE64_ENCODED]' : body;
        this.onForwardResponse(log, statusCode, logBody, headers, isBase64Encoded);
        const successResponse = adapter.getResponse({
            event,
            statusCode,
            body,
            headers,
            isBase64Encoded,
            response,
            log,
        });
        this.onForwardResponseAdapterResponse(log, successResponse, logBody);
        return successResponse;
    }
}
exports.DefaultHandler = DefaultHandler;
DefaultHandler.__type = ['TApp', 'TEvent', 'TContext', 'TCallback', 'TResponse', 'TReturn', () => core_1.BaseHandler, 'app', () => __ΩFrameworkContract, 'framework', () => __ΩAdapterContract, 'adapters', () => __ΩResolverContract, 'resolverFactory', () => __ΩBinarySettings, 'binarySettings', 'respondWithErrors', () => __ΩILogger, 'log', () => __ΩServerlessHandler, 'getHandler', () => __ΩILogger, 'event', 'context', () => __ΩBinarySettings, 'onReceiveRequest', () => __ΩILogger, () => __ΩAdapterContract, 'adapter', 'onResolveAdapter', () => __ΩILogger, () => __ΩAdapterRequest, 'requestValues', 'onResolveRequestValues', () => __ΩILogger, () => network_1.ServerlessResponse, 'response', 'onResolveForwardedResponseToFramework', () => __ΩILogger, 'statusCode', 'body', () => __ΩSingleValueHeaders, 'headers', 'isBase64Encoded', 'onForwardResponse', () => __ΩILogger, 'successResponse', 'onForwardResponseAdapterResponse', () => __ΩFrameworkContract, () => __ΩAdapterContract, () => __ΩBinarySettings, () => __ΩILogger, 'forwardRequestToFramework', () => network_1.ServerlessResponse, () => __ΩAdapterContract, () => __ΩBinarySettings, () => __ΩILogger, 'forwardResponse', 'b!b"b#b$b%b&Pe"!e""e"#e"$e"%e"&7\'Pe"!2(e"!o)"2*e""e"#e"%o+$F2,e""e"#e"$e"%e"&o-&2.n/20)21n223e"&o4"05Pn623e""27e"#28n920)21$0:<Pn;23e""e"#e"%o<$2=$0><Pn?23n@2A$0B<PnC23P7D2E$0F<PnG23\'2H&2InJ2K)2L"0M<PnN23e"%2O&2I"0P<Pe"!2(e"!oQ"2*e""27e"#28e""e"#e"%oR$2=nS20nT23e"%`0U<Pe""27P7V2Ee""e"#e"%oW$2=nX20nY23e"%0Z<5e!!e!"e!#e!$e!%e!&6\''];
//# sourceMappingURL=default.handler.js.map