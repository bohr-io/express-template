import { BinarySettings, SingleValueHeaders } from '../../@types';
import { AdapterContract, AdapterRequest, FrameworkContract, ResolverContract, ServerlessHandler } from '../../contracts';
import { BaseHandler, ILogger } from '../../core';
import { ServerlessResponse } from '../../network';
/**
 * The class that implements a default serverless handler consisting of a function with event, context and callback parameters respectively
 *
 * @breadcrumb Handlers / DefaultHandler
 * @public
 */
export declare class DefaultHandler<TApp, TEvent, TContext, TCallback, TResponse, TReturn> extends BaseHandler<TApp, TEvent, TContext, TCallback, TResponse, TReturn> {
    /**
     * {@inheritDoc}
     */
    getHandler(app: TApp, framework: FrameworkContract<TApp>, adapters: AdapterContract<TEvent, TContext, TResponse>[], resolverFactory: ResolverContract<TEvent, TContext, TCallback, TResponse, TReturn>, binarySettings: BinarySettings, respondWithErrors: boolean, log: ILogger): ServerlessHandler<TReturn>;
    /**
     * The hook executed on receive a request, before the request is being processed
     *
     * @param log - The instance of logger
     * @param event - The event sent by serverless
     * @param context - The context sent by serverless
     * @param binarySettings - The binary settings
     * @param respondWithErrors - Indicates whether the error stack should be included in the response or not
     */
    protected onReceiveRequest(log: ILogger, event: TEvent, context: TContext, binarySettings: BinarySettings, respondWithErrors: boolean): void;
    /**
     * The hook executed after resolve the adapter that will be used to handle the request and response
     *
     * @param log - The instance of logger
     * @param adapter - The adapter resolved
     */
    protected onResolveAdapter(log: ILogger, adapter: AdapterContract<TEvent, TContext, TResponse>): void;
    /**
     * The hook executed after resolves the request values that will be sent to the framework
     *
     * @param log - The instance of logger
     * @param requestValues - The request values returned by the adapter
     */
    protected onResolveRequestValues(log: ILogger, requestValues: AdapterRequest): void;
    /**
     * The hook executed after handling the response sent by the framework
     *
     * @param log - The instance of logger
     * @param response - The response sent by the framework
     */
    protected onResolveForwardedResponseToFramework(log: ILogger, response: ServerlessResponse): void;
    /**
     * The hook executed before sending response to the serverless
     *
     * @param log - The instance of logger
     * @param statusCode - The status code of the response
     * @param body - The body of the response
     * @param headers - The headers of the response
     * @param isBase64Encoded - Indicates whether the response was encoded as binary or not
     */
    protected onForwardResponse(log: ILogger, statusCode: number, body: string, headers: SingleValueHeaders, isBase64Encoded: boolean): void;
    /**
     * The hook executed before sending response to the serverless with response from adapter
     *
     * @param log - The instance of logger
     * @param successResponse - The success response resolved by the adapter
     * @param body - The body of the response sent by the framework
     */
    protected onForwardResponseAdapterResponse(log: ILogger, successResponse: TResponse, body: string): void;
    /**
     * The function to forward the event to the framework
     *
     * @param app - The instance of the app (express, hapi, etc...)
     * @param framework - The framework that will process requests
     * @param event - The event sent by serverless
     * @param context - The context sent by serverless
     * @param adapter - The adapter resolved to this event
     * @param log - The instance of logger
     * @param binarySettings - The binary settings
     */
    protected forwardRequestToFramework(app: TApp, framework: FrameworkContract<TApp>, event: TEvent, context: TContext, adapter: AdapterContract<TEvent, TContext, TResponse>, binarySettings: BinarySettings, log: ILogger): Promise<TResponse>;
    /**
     * The function to forward the response back to the serverless
     *
     * @param event - The event sent by serverless
     * @param response - The response of the framework
     * @param adapter - The adapter resolved to this event
     * @param binarySettings - The binary settings
     * @param log - The instance of logger
     */
    protected forwardResponse(event: TEvent, response: ServerlessResponse, adapter: AdapterContract<TEvent, TContext, TResponse>, binarySettings: BinarySettings, log: ILogger): TResponse;
}
