"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureHandler = exports.__ΩAzureHandlerOptions = void 0;
const { __ΩFrameworkContract } = require('../../contracts');
const { __ΩAdapterContract } = require('../../contracts');
const { __ΩResolverContract } = require('../../contracts');
const { __ΩBinarySettings } = require('../../@types');
const { __ΩILogger } = require('../../core');
const { __ΩServerlessHandler } = require('../../contracts');
function __assignType(fn, args) {
    fn.__type = args;
    return fn;
}
const core_1 = require("../../core");
const default_1 = require("../default");
const __ΩAzureHandlerOptions = ['useContextLogWhenInternalLogger', 'P)4!M'];
exports.__ΩAzureHandlerOptions = __ΩAzureHandlerOptions;
/**
 * The class that implements a serverless handler for Azure Function.
 *
 * When you don't specify a custom logger, the {@link Context} logger is used instead.
 *
 * @breadcrumb Handlers / AzureHandler
 * @public
 */
class AzureHandler extends default_1.DefaultHandler {
    //#region Constructor
    /**
     * Default Constructor
     */
    constructor(options) {
        super();
        this.options = options;
    }
    //#endregion
    //#region Public Methods
    /**
     * {@inheritDoc}
     */
    getHandler(app, framework, adapters, resolverFactory, binarySettings, respondWithErrors, log) {
        return __assignType((context, event) => {
            var _a;
            const useContextLogWhenInternalLogger = (0, core_1.getDefaultIfUndefined)((_a = this.options) === null || _a === void 0 ? void 0 : _a.useContextLogWhenInternalLogger, true);
            if ((0, core_1.isInternalLogger)(log) && useContextLogWhenInternalLogger)
                log = this.createLoggerFromContext(context);
            const defaultHandler = super.getHandler(app, framework, adapters, resolverFactory, binarySettings, respondWithErrors, log);
            // remove this from context
            // because user can mess it-up the things
            // @ts-ignore
            delete context.done;
            delete context.res;
            return defaultHandler(event, context, undefined);
        }, ['context', 'event', '', 'P!2!!2""/#']);
    }
    //#endregion
    //#region Protected Methods
    /**
     * Get the {@link ILogger} instance from logger of the context
     *
     * @param context - The Azure Context
     */
    createLoggerFromContext(context) {
        return {
            error: context.log.error,
            debug: context.log.verbose,
            verbose: context.log.verbose,
            info: context.log.info,
            warn: context.log.warn,
        };
    }
}
exports.AzureHandler = AzureHandler;
AzureHandler.__type = ['TApp', 'TEvent', 'TCallback', 'TResponse', 'TReturn', () => default_1.DefaultHandler, () => __ΩAzureHandlerOptions, 'options', 'constructor', 'app', () => __ΩFrameworkContract, 'framework', () => __ΩAdapterContract, 'adapters', () => __ΩResolverContract, 'resolverFactory', () => __ΩBinarySettings, 'binarySettings', 'respondWithErrors', () => __ΩILogger, 'log', () => __ΩServerlessHandler, 'getHandler', 'context', () => __ΩILogger, 'createLoggerFromContext', 'b!b"b#b$b%Pe"!e""!e"#e"$e"%7&Pn\'2(8<9"0)Pe"!2*e"!o+"2,e""!e"$o-$F2.e""!e"#e"$e"%o/&20n122)23n425e"%o6"07P!28n90:<5e!!e!"!e!#e!$e!%6\''];
//# sourceMappingURL=azure.handler.js.map